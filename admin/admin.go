// Copyright 2019 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT. 

// Package model provides definitions for all input
// and output parameters types found in DocuSign's 
// OpenAPI (swagger) file.
//
// Api documentation may be found at:
// https://developers.docusign.com/docs/admin-api/reference
package admin // import "github.com/jfcote87/esign/admin

type AddDSGroupAndUsersResponse struct { 
    // 
    Group *DSGroupResponse `json:"group,omitempty"`
    // 
    GroupUsers *AddDSGroupUsersResponse `json:"group_users,omitempty"`
}

type AddDSGroupUsersResponse struct { 
    // 
    TotalCount int32 `json:"TotalCount,omitempty"`
    // 
    IsSuccess bool `json:"is_success,omitempty"`
    // A list of users.
    Users []DSGroupUserResponse `json:"users,omitempty"`
}

// AddUserResponse methods to manage multi-product users in an account.
type AddUserResponse struct { 
    // 
    Accounts []AddUserResponseAccountProperties `json:"accounts,omitempty"`
    // The email address.
    Email string `json:"email,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // 
    SiteID int32 `json:"site_id,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

type AddUserResponseAccountProperties struct { 
    // The user's company name.
    CompanyName string `json:"company_name,omitempty"`
    // 
    DsGroups []DSGroupResponse `json:"ds_groups,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // The user's job title.
    JobTitle string `json:"job_title,omitempty"`
    // 
    ProductPermissionProfiles []ProductPermissionProfileResponse `json:"product_permission_profiles,omitempty"`
    // 
    SiteID int32 `json:"site_id,omitempty"`
}

// CertificateResponse information about a single certificate.
type CertificateResponse struct { 
    // The date when the certificate expires.
    ExpirationDate string `json:"expiration_date,omitempty"`
    // The unique ID of the certificate.
    ID string `json:"id,omitempty"`
    // If **true**, the certificate is valid.
    IsValid bool `json:"is_valid,omitempty"`
    // The certificate issuer.
    Issuer string `json:"issuer,omitempty"`
    // A list of useful links.
    Links []LinkResponse `json:"links,omitempty"`
    // The thumbprint of the certificate.
    Thumbprint string `json:"thumbprint,omitempty"`
}

type DSGroupAddRequest struct { 
    // 
    Description string `json:"description,omitempty"`
    // 
    GroupName string `json:"group_name,omitempty"`
}

type DSGroupAndUsersResponse struct { 
    // 
    Group *DSGroupResponse `json:"group,omitempty"`
    // 
    GroupUsers *DSGroupUsersResponse `json:"group_users,omitempty"`
}

type DSGroupListResponse struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
    // 
    DsGroups []DSGroupResponse `json:"ds_groups,omitempty"`
    // The page number.
    Page int32 `json:"page,omitempty"`
    // The number of items per page.
    PageSize int32 `json:"page_size,omitempty"`
    // 
    TotalCount int32 `json:"total_count,omitempty"`
}

type DSGroupRequest struct { 
    // 
    DsGroupID string `json:"ds_group_id,omitempty"`
}

type DSGroupResponse struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
    // 
    AccountName string `json:"account_name,omitempty"`
    // 
    Description string `json:"description,omitempty"`
    // 
    DsGroupID string `json:"ds_group_id,omitempty"`
    // 
    ExternalAccountID int64 `json:"external_account_id,omitempty"`
    // 
    GroupID string `json:"group_id,omitempty"`
    // 
    GroupName string `json:"group_name,omitempty"`
    // 
    IsAdmin bool `json:"is_admin,omitempty"`
    // 
    LastModifiedOn string `json:"last_modified_on,omitempty"`
    // 
    SourceProductName string `json:"source_product_name,omitempty"`
    // 
    UserCount int32 `json:"user_count,omitempty"`
}

type DSGroupUserResponse struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
    // Error results.
    ErrorDetails *ErrorDetails `json:"error_details,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // 
    MiddleName string `json:"middle_name,omitempty"`
    // Status.
    Status string `json:"status,omitempty"`
    // 
    UserID string `json:"user_id,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

type DSGroupUsersAddRequest struct { 
    // 
    UserIds []string `json:"user_ids,omitempty"`
}

type DSGroupUsersRemoveRequest struct { 
    // 
    UserIds []string `json:"user_ids,omitempty"`
}

type DSGroupUsersResponse struct { 
    // The page number.
    Page int32 `json:"page,omitempty"`
    // The number of items per page.
    PageSize int32 `json:"page_size,omitempty"`
    // 
    TotalCount int32 `json:"total_count,omitempty"`
    // A list of users.
    Users []DSGroupUserResponse `json:"users,omitempty"`
}

type DeleteMembershipRequest struct { 
    // The ID of a user's account you want to close.
    ID string `json:"id,omitempty"`
}

// DeleteMembershipResponse results of closing accounts.
type DeleteMembershipResponse struct { 
    // Error results.
    ErrorDetails *ErrorDetails `json:"error_details,omitempty"`
    // The ID of an account that could not be closed.
    ID string `json:"id,omitempty"`
}

// DeleteMembershipsRequest is a list of accounts to close for a user.
type DeleteMembershipsRequest struct { 
    // A list of accounts to close for a user.
    Accounts []DeleteMembershipRequest `json:"accounts,omitempty"`
}

// DeleteMembershipsResponse is the results of closing a user's account.
type DeleteMembershipsResponse struct { 
    // A list of accounts that were closed.
    Accounts []DeleteMembershipResponse `json:"accounts,omitempty"`
    // If **true**, the request to close the accounts succeeded.
    Success bool `json:"success,omitempty"`
}

// DeleteResponse results of deleting identities.
type DeleteResponse struct { 
    // A list of identities to delete.
    Identities []UserIdentityResponse `json:"identities,omitempty"`
    // If **true**, the request succeeded.
    Success bool `json:"success,omitempty"`
}

// DeleteUserIdentityRequest request to delete a user's identities,
type DeleteUserIdentityRequest struct { 
    // A list of identities.
    Identities []UserIdentityRequest `json:"identities,omitempty"`
}

// DomainResponse information about a reserved domain.
type DomainResponse struct { 
    // The host name of the reserved domain.
    HostName string `json:"host_name,omitempty"`
    // The ID of the reserved domain.
    ID string `json:"id,omitempty"`
    // The identity provider ID of the reserved domain.
    IdentityProviderID string `json:"identity_provider_id,omitempty"`
    // A list of useful links.
    Links []LinkResponse `json:"links,omitempty"`
    // A list of settings for the reserved domain.
    // 
    Settings []SettingResponse `json:"settings,omitempty"`
    // The status of the request. One of:
    // 
    // - `unknown`
    // - `pending`
    // - `active`
    // - `deactivated`
    // - `rejected`
    Status string `json:"status,omitempty"`
    // A token  in form of text of the reserved domain.
    TxtToken string `json:"txt_token,omitempty"`
}

// DomainsResponse is a response about reserved domains.
type DomainsResponse struct { 
    // Information about reserved domains.
    ReservedDomains []DomainResponse `json:"reserved_domains,omitempty"`
}

// ErrorDetails errors.
type ErrorDetails struct { 
    // The code for the error.
    Error string `json:"error,omitempty"`
    // A description of the error.
    ErrorDescription string `json:"error_description,omitempty"`
}

type ForceActivateMembershipRequest struct { 
    // 
    SiteID int32 `json:"site_id,omitempty"`
}

// GroupRequest is a group for a user to belong to.
type GroupRequest struct { 
    // The ID of the group.
    ID int64 `json:"id,omitempty"`
    // The name of the group.
    Name string `json:"name,omitempty"`
    // The type of group. One of:
    // 
    // - `invalid`
    // - `admin_group`
    // - `everyone_group`
    // - `custom_group`
    Type string `json:"type,omitempty"`
}

// IdentityProviderResponse information about a single identity provider.
type IdentityProviderResponse struct { 
    // If **true**, users who use this identity provider are automatically provisioned. 
    AutoProvisionUsers bool `json:"auto_provision_users,omitempty"`
    // The human-readable name of the identity provider.
    FriendlyName string `json:"friendly_name,omitempty"`
    // The unique ID of the identity provider.
    ID string `json:"id,omitempty"`
    // A list of useful URLs.
    Links []LinkResponse `json:"links,omitempty"`
    // If `type` is `saml_20`, contains details about the SAML 2.0 response.
    Saml20 *Saml2IdentityProviderResponse `json:"saml_20,omitempty"`
    // The type of the identity provider. One of:
    // 
    // - `none`
    // - `saml_20`
    // - `saml_11`
    // - `saml_10`
    // - `ws_federation`
    // - `open_id_connect`
    Type string `json:"type,omitempty"`
}

type IdentityProvidersResponse struct { 
    // 
    IdentityProviders []IdentityProviderResponse `json:"identity_providers,omitempty"`
}

// LinkResponse is a link to a useful URL.
type LinkResponse struct { 
    // The URL of the linked item.
    Href string `json:"href,omitempty"`
    // The kind of linked item.
    Rel string `json:"rel,omitempty"`
}

// MemberGroupResponse and individual group responses,.
type MemberGroupResponse struct { 
    // The unique ID of the group.
    ID int64 `json:"id,omitempty"`
    // The name of the group.
    Name string `json:"name,omitempty"`
    // The type of group. One of:
    // 
    // - `invalid`
    // - `admin_group`
    // - `everyone_group`
    // - `custom_group`
    Type string `json:"type,omitempty"`
}

// MemberGroupsResponse is a response about member groups. It contains the groups and paging information.
type MemberGroupsResponse struct { 
    // A list of the responses.
    Groups []MemberGroupResponse `json:"groups,omitempty"`
    // Information about paging though the responses.
    Paging *PagingResponseProperties `json:"paging,omitempty"`
}

// MembershipResponse information about group membership.
type MembershipResponse struct { 
    // The ID of the account.
    AccountID string `json:"account_id,omitempty"`
    // The name of the account.
    AccountName string `json:"account_name,omitempty"`
    // The date the user's account was created.
    CreatedOn string `json:"created_on,omitempty"`
    // The email address.
    Email string `json:"email,omitempty"`
    // The external account ID.
    ExternalAccountID string `json:"external_account_id,omitempty"`
    // A list of groups the user is a member of in this account,
    Groups []MemberGroupResponse `json:"groups,omitempty"`
    // If **true**,
    // the user has administration 
    // privileges on the account.
    IsAdmin bool `json:"is_admin,omitempty"`
    // If **true**,
    // this is an external account.
    IsExternalAccount bool `json:"is_external_account,omitempty"`
    // The user's permission profile.
    PermissionProfile *PermissionProfileResponse `json:"permission_profile,omitempty"`
    // The status of the user's membership.
    Status string `json:"status,omitempty"`
}

// NewAccountUserRequest is a new user request.
type NewAccountUserRequest struct { 
    // The access code that the user needs to activate an account.
    AccessCode string `json:"access_code,omitempty"`
    // If **true**, the user's account is activated automatically.
    AutoActivateMemberships bool `json:"auto_activate_memberships,omitempty"`
    // The account ID of the user's default account.
    DefaultAccountID string `json:"default_account_id,omitempty"`
    // The email address of the user.
    Email string `json:"email,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    // 
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The new user's requested groups.
    Groups []GroupRequest `json:"groups,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // The new user's permission profile.
    PermissionProfile *PermissionProfileRequest `json:"permission_profile,omitempty"`
    // 
    SelectedLanguages string `json:"selected_languages,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

type NewMultiProductUserAddRequest struct { 
    // The access code that the user needs to activate an account.
    AccessCode string `json:"access_code,omitempty"`
    // If **true**, the user's account is activated automatically.
    AutoActivateMemberships bool `json:"auto_activate_memberships,omitempty"`
    // 
    DefaultAccountID string `json:"default_account_id,omitempty"`
    // 
    DsGroups []DSGroupRequest `json:"ds_groups,omitempty"`
    // The email address.
    Email string `json:"email,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // 
    ProductPermissionProfiles []ProductPermissionProfileRequest `json:"product_permission_profiles,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

// NewUserRequest information about a new user.
type NewUserRequest struct { 
    // The access code that the user needs to activate an account.
    AccessCode string `json:"access_code,omitempty"`
    // A list of accounts the user will belong to.
    Accounts []NewUserRequestAccountProperties `json:"accounts,omitempty"`
    // If **true**, the user's account is activated automatically.
    AutoActivateMemberships bool `json:"auto_activate_memberships,omitempty"`
    // The account ID of the user's default account.
    DefaultAccountID string `json:"default_account_id,omitempty"`
    // The email address.
    Email string `json:"email,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // 
    SelectedLanguages string `json:"selected_languages,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

// NewUserRequestAccountProperties is an individual new account user.
type NewUserRequestAccountProperties struct { 
    // The user's company name.
    CompanyName string `json:"company_name,omitempty"`
    // The new user's requested groups.
    Groups []GroupRequest `json:"groups,omitempty"`
    // The account ID.
    ID string `json:"id,omitempty"`
    // The user's job title.
    JobTitle string `json:"job_title,omitempty"`
    // The new user's permission profile.
    PermissionProfile *PermissionProfileRequest `json:"permission_profile,omitempty"`
}

// NewUserResponse information about a newly created user.
type NewUserResponse struct { 
    // A list of accounts the user belongs to.
    Accounts []NewUserResponseAccountProperties `json:"accounts,omitempty"`
    // The primary email address of the user.
    Email string `json:"email,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    // 
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The ID of the added user
    ID string `json:"id,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // The site ID of the added user.
    SiteID int32 `json:"site_id,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

// NewUserResponseAccountProperties information about a newly created user.
type NewUserResponseAccountProperties struct { 
    // The user's company name.
    CompanyName string `json:"company_name,omitempty"`
    // A list of groups that the user belongs to.
    Groups []MemberGroupResponse `json:"groups,omitempty"`
    // The user's unique ID.
    ID string `json:"id,omitempty"`
    // The job title of the user.
    JobTitle string `json:"job_title,omitempty"`
    // A profile or list of the permissions the user has access to.
    PermissionProfile *PermissionProfileResponse `json:"permission_profile,omitempty"`
    // The site ID of the account.
    SiteID int32 `json:"site_id,omitempty"`
}

type OASIRRErrorDetails struct { 
    // The error number.
    Error string `json:"error,omitempty"`
    // A longer description of the error.
    ErrorDescription string `json:"error_description,omitempty"`
}

type OASIRROrganizationAccountSettingsErrorDataResponse struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
    // 
    AccountName string `json:"account_name,omitempty"`
    // The error number.
    Error string `json:"error,omitempty"`
    // 
    ErrorKey string `json:"error_key,omitempty"`
    // 
    SettingKey string `json:"setting_key,omitempty"`
}

type OETRErrorDetails struct { 
    // The error number.
    Error string `json:"error,omitempty"`
    // A longer description of the error.
    ErrorDescription string `json:"error_description,omitempty"`
}

type OSAMRContact struct { 
    // The email address.
    Email string `json:"email,omitempty"`
    // 
    Name string `json:"name,omitempty"`
    // 
    Title string `json:"title,omitempty"`
}

type OrgExportSelectedAccount struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
}

type OrgExportSelectedDomain struct { 
    // 
    Domain string `json:"domain,omitempty"`
}

type OrgReportConfigurationResponse struct { 
    // 
    CustomDatesEnabled bool `json:"custom_dates_enabled,omitempty"`
    // 
    EnabledReportTypes []int `json:"enabled_report_types,omitempty"`
    // 
    IsAccountLimitDisabled bool `json:"is_account_limit_disabled,omitempty"`
}

type OrgReportCreateResponse struct { 
    // 
    ReportCorrelationID string `json:"report_correlation_id,omitempty"`
}

type OrgReportListResponse struct { 
    // 
    Reports []OrgReportListResponseOrgReport `json:"reports,omitempty"`
}

type OrgReportListResponseOrgReport struct { 
    // 
    AccountExportCount int32 `json:"account_export_count,omitempty"`
    // 
    Complete bool `json:"complete,omitempty"`
    // 
    CreatedOn string `json:"created_on,omitempty"`
    // 
    CustomEndDate string `json:"custom_end_date,omitempty"`
    // 
    CustomStartDate string `json:"custom_start_date,omitempty"`
    // 
    ReportCorrelationID string `json:"report_correlation_id,omitempty"`
    // 
    ReportDateRange string `json:"report_date_range,omitempty"`
    // 
    ReportID string `json:"report_id,omitempty"`
    // 
    ReportTypeID string `json:"report_type_id,omitempty"`
    // 
    Requestor *OrgReportListResponseRequestor `json:"requestor,omitempty"`
    // 
    SiteID int32 `json:"site_id,omitempty"`
    // 
    URL string `json:"url,omitempty"`
}

type OrgReportListResponseRequestor struct { 
    // 
    ID string `json:"id,omitempty"`
    // 
    Name string `json:"name,omitempty"`
}

type OrgReportRequest struct { 
    // 
    AccountIds []string `json:"account_ids,omitempty"`
    // 
    CustomEndDate string `json:"custom_end_date,omitempty"`
    // 
    CustomStartDate string `json:"custom_start_date,omitempty"`
    // 
    ReportDateRange string `json:"report_date_range,omitempty"`
    // 
    ReportType string `json:"report_type,omitempty"`
}

type OrganizationAccountRequest struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
}

// OrganizationAccountResponse information about an account.
type OrganizationAccountResponse struct { 
    // The external account ID.
    ExternalAccountID int64 `json:"external_account_id,omitempty"`
    // The unique ID of the  account.
    ID string `json:"id,omitempty"`
    // The name of the account.
    Name string `json:"name,omitempty"`
    // The site ID.
    SiteID int32 `json:"site_id,omitempty"`
}

type OrganizationAccountSettingsImportRequestorResponse struct { 
    // The email address.
    Email string `json:"email,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    Name string `json:"name,omitempty"`
    // 
    Type string `json:"type,omitempty"`
}

type OrganizationAccountSettingsImportResponse struct { 
    // 
    Completed string `json:"completed,omitempty"`
    // 
    Created string `json:"created,omitempty"`
    // 
    Expires string `json:"expires,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    LastModified string `json:"last_modified,omitempty"`
    // 
    NumberProcessedAccounts int64 `json:"number_processed_accounts,omitempty"`
    // 
    NumberUnprocessedAccounts int64 `json:"number_unprocessed_accounts,omitempty"`
    // 
    OrganizationID string `json:"organization_id,omitempty"`
    // 
    PercentCompleted int32 `json:"percent_completed,omitempty"`
    // 
    Requestor *OrganizationAccountSettingsImportRequestorResponse `json:"requestor,omitempty"`
    // 
    Results []OrganizationAccountSettingsImportResultResponse `json:"results,omitempty"`
    // 
    SkippedSettingsByAccount map[string][]interface{} `json:"skipped_settings_by_account,omitempty"`
    // Status.
    Status string `json:"status,omitempty"`
    // 
    Success bool `json:"success,omitempty"`
    // 
    Type string `json:"type,omitempty"`
}

type OrganizationAccountSettingsImportResultResponse struct { 
    // Error results.
    ErrorDetails *OASIRRErrorDetails `json:"error_details,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    NumberProcessedAccounts int64 `json:"number_processed_accounts,omitempty"`
    // 
    NumberUnprocessedAccounts int64 `json:"number_unprocessed_accounts,omitempty"`
    // 
    ProcessingIssuesByAccount []OASIRROrganizationAccountSettingsErrorDataResponse `json:"processing_issues_by_account,omitempty"`
    // 
    SiteID int32 `json:"site_id,omitempty"`
    // 
    URL string `json:"url,omitempty"`
}

type OrganizationAccountsRequest struct { 
    // 
    Accounts []OrganizationAccountRequest `json:"accounts,omitempty"`
}

type OrganizationExportAccount struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
}

type OrganizationExportDomain struct { 
    // 
    Domain string `json:"domain,omitempty"`
}

// OrganizationExportRequest enables you to specify the kind of export request.
type OrganizationExportRequest struct { 
    // 
    Accounts []OrganizationExportAccount `json:"accounts,omitempty"`
    // 
    Domains []OrganizationExportDomain `json:"domains,omitempty"`
    // The type of export requested. One of:
    // 
    // - `organization_domain_users_export`: All users of the reserved domains.
    // - `organization_external_memberships_export`: Users whose email address domain is *not* linked to the organization. 
    // - `organization_memberships_export`: Every user in every account in the organization. Users in multiple accounts will appear more than once.
    // - `organization_account_settings_export`: This value only applies to requests to export account settings.
    Type string `json:"type,omitempty"`
}

type OrganizationExportRequestorResponse struct { 
    // The email address.
    Email string `json:"email,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    Name string `json:"name,omitempty"`
    // 
    Type string `json:"type,omitempty"`
}

type OrganizationExportResponse struct { 
    // 
    Completed string `json:"completed,omitempty"`
    // 
    Created string `json:"created,omitempty"`
    // 
    Expires string `json:"expires,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    LastModified string `json:"last_modified,omitempty"`
    // 
    MetadataURL string `json:"metadata_url,omitempty"`
    // 
    NumberRows int64 `json:"number_rows,omitempty"`
    // 
    PercentCompleted int32 `json:"percent_completed,omitempty"`
    // 
    Requestor *OrganizationExportRequestorResponse `json:"requestor,omitempty"`
    // 
    Results []OrganizationExportTaskResponse `json:"results,omitempty"`
    // 
    SelectedAccounts []OrgExportSelectedAccount `json:"selected_accounts,omitempty"`
    // 
    SelectedDomains []OrgExportSelectedDomain `json:"selected_domains,omitempty"`
    // 
    SizeBytes int64 `json:"size_bytes,omitempty"`
    // Status.
    Status string `json:"status,omitempty"`
    // 
    Success bool `json:"success,omitempty"`
    // 
    Type string `json:"type,omitempty"`
}

type OrganizationExportTaskResponse struct { 
    // Error results.
    ErrorDetails *OETRErrorDetails `json:"error_details,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    NumberRows int64 `json:"number_rows,omitempty"`
    // 
    SiteID int32 `json:"site_id,omitempty"`
    // 
    SizeBytes int64 `json:"size_bytes,omitempty"`
    // 
    URL string `json:"url,omitempty"`
}

type OrganizationExportsResponse struct { 
    // 
    Exports []OrganizationExportResponse `json:"exports,omitempty"`
}

// OrganizationImportResponse methods to import users.
type OrganizationImportResponse struct { 
    // 
    AddedUserCount int32 `json:"added_user_count,omitempty"`
    // 
    ClosedUserCount int32 `json:"closed_user_count,omitempty"`
    // 
    Created string `json:"created,omitempty"`
    // 
    ErrorCount int32 `json:"error_count,omitempty"`
    // 
    FileLevelErrorRollups []OrganizationImportResponseErrorRollup `json:"file_level_error_rollups,omitempty"`
    // 
    HasCsvResults bool `json:"has_csv_results,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    ImportsFailedForAccounts string `json:"imports_failed_for_accounts,omitempty"`
    // 
    ImportsFailedForSites string `json:"imports_failed_for_sites,omitempty"`
    // 
    ImportsNotFoundOrNotAvailableForAccounts string `json:"imports_not_found_or_not_available_for_accounts,omitempty"`
    // 
    ImportsNotFoundOrNotAvailableForSites string `json:"imports_not_found_or_not_available_for_sites,omitempty"`
    // 
    ImportsTimedOutForAccounts string `json:"imports_timed_out_for_accounts,omitempty"`
    // 
    ImportsTimedOutForSites string `json:"imports_timed_out_for_sites,omitempty"`
    // 
    InvalidColumnHeaders string `json:"invalid_column_headers,omitempty"`
    // 
    LastModified string `json:"last_modified,omitempty"`
    // 
    NoActionRequiredUserCount int32 `json:"no_action_required_user_count,omitempty"`
    // 
    ProcessedUserCount int32 `json:"processed_user_count,omitempty"`
    // 
    Requestor *OrganizationImportResponseRequestor `json:"requestor,omitempty"`
    // 
    ResultsURI string `json:"results_uri,omitempty"`
    // Status.
    Status string `json:"status,omitempty"`
    // 
    Type string `json:"type,omitempty"`
    // 
    UpdatedUserCount int32 `json:"updated_user_count,omitempty"`
    // 
    UserCount int32 `json:"user_count,omitempty"`
    // 
    UserLevelErrorRollups []OrganizationImportResponseErrorRollup `json:"user_level_error_rollups,omitempty"`
    // 
    UserLevelWarningRollups []OrganizationImportResponseWarningRollup `json:"user_level_warning_rollups,omitempty"`
    // 
    WarningCount int32 `json:"warning_count,omitempty"`
}

type OrganizationImportResponseErrorRollup struct { 
    // 
    Count int32 `json:"count,omitempty"`
    // 
    ErrorType string `json:"error_type,omitempty"`
}

type OrganizationImportResponseRequestor struct { 
    // The email address.
    Email string `json:"email,omitempty"`
    // 
    ID string `json:"id,omitempty"`
    // 
    Name string `json:"name,omitempty"`
    // 
    Type string `json:"type,omitempty"`
}

type OrganizationImportResponseWarningRollup struct { 
    // 
    Count int32 `json:"count,omitempty"`
    // 
    WarningType string `json:"warning_type,omitempty"`
}

type OrganizationImportsResponse struct { 
    // 
    Imports []OrganizationImportResponse `json:"imports,omitempty"`
}

// OrganizationResponse information about an individual organization.
type OrganizationResponse struct { 
    // A list of organization accounts.
    Accounts []OrganizationAccountResponse `json:"accounts,omitempty"`
    // The user who created the organization account.
    CreatedBy string `json:"created_by,omitempty"`
    // The date the organization's account was created.
    CreatedOn string `json:"created_on,omitempty"`
    // The default account ID of the organization.
    DefaultAccountID string `json:"default_account_id,omitempty"`
    // The default permission profile ID of the organization.
    DefaultPermissionProfileID int64 `json:"default_permission_profile_id,omitempty"`
    // A description of the organization.
    Description string `json:"description,omitempty"`
    // The ID of the organization.
    ID string `json:"id,omitempty"`
    // A list of identity providers for the organization.
    IdentityProviders []IdentityProvidersResponse `json:"identity_providers,omitempty"`
    // The user who last updated the organization's account.
    LastModifiedBy string `json:"last_modified_by,omitempty"`
    // The date the organization's account was last updated.
    LastModifiedOn string `json:"last_modified_on,omitempty"`
    // A list of links for the organization.
    Links []LinkResponse `json:"links,omitempty"`
    // The name of the organization.
    Name string `json:"name,omitempty"`
    // A list of reserved domains for the organization.
    ReservedDomains []DomainResponse `json:"reserved_domains,omitempty"`
    // A list of the organization accounts users.
    Users []OrganizationSimpleIDObject `json:"users,omitempty"`
}

type OrganizationSalesforceAccountManagersResponse struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
    // 
    AccountManager *OSAMRContact `json:"account_manager,omitempty"`
    // 
    AccountName string `json:"account_name,omitempty"`
    // 
    AccountOwner *OSAMRContact `json:"account_owner,omitempty"`
    // 
    AccountType string `json:"account_type,omitempty"`
    // 
    ParentAccount *OrganizationSalesforceAccountManagersResponse `json:"parent_account,omitempty"`
}

// OrganizationSimpleIDObject is an ID object.
type OrganizationSimpleIDObject struct { 
    // The ID.
    ID string `json:"id,omitempty"`
}

// OrganizationUserResponse information about a user.
type OrganizationUserResponse struct { 
    // The date the user's account was created.
    CreatedOn string `json:"created_on,omitempty"`
    // 
    DsGroups []DSGroupResponse `json:"ds_groups,omitempty"`
    // The email address.
    Email string `json:"email,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The user's unique ID.
    ID string `json:"id,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // The date on which the user became a member of the organization.
    MembershipCreatedOn string `json:"membership_created_on,omitempty"`
    // 
    MembershipID string `json:"membership_id,omitempty"`
    // The user's membership status. One of:
    // 
    // - `activation_required`
    // - `activation_sent`
    // - `active`
    // - `closed`
    // - `disabled`
    // 
    MembershipStatus string `json:"membership_status,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
    // The user's status. One of:
    // 
    // - `active`
    // - `created`
    // - `closed`
    // 
    UserStatus string `json:"user_status,omitempty"`
}

// OrganizationUsersResponse is a response containing information about users.
type OrganizationUsersResponse struct { 
    // Contains information about paging through the results.
    Paging *PagingResponseProperties `json:"paging,omitempty"`
    // A list of users.
    Users []OrganizationUserResponse `json:"users,omitempty"`
}

// OrganizationsResponse organization list.
type OrganizationsResponse struct { 
    // A list of organizations of which the  authenticated user is a member.
    Organizations []OrganizationResponse `json:"organizations,omitempty"`
}

type PagingResponseProperties struct { 
    // 
    Next string `json:"next,omitempty"`
    // 
    Previous string `json:"previous,omitempty"`
    // 
    ResultSetEndPosition int32 `json:"result_set_end_position,omitempty"`
    // 
    ResultSetSize int32 `json:"result_set_size,omitempty"`
    // 
    ResultSetStartPosition int32 `json:"result_set_start_position,omitempty"`
    // 
    TotalSetSize int32 `json:"total_set_size,omitempty"`
}

// PermissionProfileRequest is a permission profile.
type PermissionProfileRequest struct { 
    // The ID of the permission profile.
    ID int64 `json:"id,omitempty"`
    // The name of the permission profile.
    Name string `json:"name,omitempty"`
}

// PermissionProfileResponse this object is an individual permission profile response.
type PermissionProfileResponse struct { 
    // The ID of the permission profile.
    ID int64 `json:"id,omitempty"`
    // The name of the permission profile. 
    // 
    // Example: `DocuSign Sender`
    Name string `json:"name,omitempty"`
}

type PermissionProfileResponse21 struct { 
    // 
    PermissionProfileID string `json:"permission_profile_id,omitempty"`
    // 
    PermissionProfileName string `json:"permission_profile_name,omitempty"`
}

// PermissionsResponse is a list of permission profiles for a given account.
type PermissionsResponse struct { 
    // An array of permission profile responses.
    Permissions []PermissionProfileResponse `json:"permissions,omitempty"`
}

type ProductPermissionProfileRequest struct { 
    // 
    PermissionProfileID string `json:"permission_profile_id,omitempty"`
    // 
    ProductID string `json:"product_id,omitempty"`
}

type ProductPermissionProfileResponse struct { 
    // 
    ErrorMessage string `json:"error_message,omitempty"`
    // 
    PermissionProfiles []PermissionProfileResponse21 `json:"permission_profiles,omitempty"`
    // 
    ProductID string `json:"product_id,omitempty"`
    // 
    ProductName string `json:"product_name,omitempty"`
}

type ProductPermissionProfilesRequest struct { 
    // 
    ProductPermissionProfiles []ProductPermissionProfileRequest `json:"product_permission_profiles,omitempty"`
}

type ProductPermissionProfilesResponse struct { 
    // 
    ProductPermissionProfiles []ProductPermissionProfileResponse `json:"product_permission_profiles,omitempty"`
}

type RemoveDSGroupUsersResponse struct { 
    // 
    FailedUsers []DSGroupUserResponse `json:"failed_users,omitempty"`
    // 
    IsSuccess bool `json:"is_success,omitempty"`
}

// RequiredAttributeMappingResponse is a single attribute mapping response.
type RequiredAttributeMappingResponse struct { 
    // The human-readable name of the attribute.
    RequiredAttributeFriendlyName string `json:"required_attribute_friendly_name,omitempty"`
    // The unique ID of the attribute.
    RequiredAttributeID int32 `json:"required_attribute_id,omitempty"`
    // The name of the attribute.
    RequiredAttributeName string `json:"required_attribute_name,omitempty"`
    // The name of the substitute attribute.
    SubstituteAttributeName string `json:"substitute_attribute_name,omitempty"`
}

// Saml2IdentityProviderResponse information about a SAML 2.0 identity provider.
type Saml2IdentityProviderResponse struct { 
    // A list of attribute mappings.
    AttributeMappings []RequiredAttributeMappingResponse `json:"attribute_mappings,omitempty"`
    // A list of certificates responses.
    Certificates []CertificateResponse `json:"certificates,omitempty"`
    // The name of the certificate issuer.
    Issuer string `json:"issuer,omitempty"`
    // A list of settings.
    Settings []SettingResponse `json:"settings,omitempty"`
}

// SettingResponse is a key/value list of settings.
type SettingResponse struct { 
    // The key of the setting.
    Key string `json:"key,omitempty"`
    // The type of the setting. One of:
    // 
    // - `unknown`
    // - `guid`
    // - `text`
    // - `integer`
    // - `boolean`
    // - `datetime`
    // - `enumeration`
    Type string `json:"type,omitempty"`
    // The value of the setting.
    Value interface{} `json:"value,omitempty"`
}

// UpdateMembershipRequest is a request to update group membership.
type UpdateMembershipRequest struct { 
    // The access code that the user needs to activate an account.
    AccessCode string `json:"access_code,omitempty"`
    // The user's unique ID.
    AccountID string `json:"account_id,omitempty"`
    // The user's company name.
    CompanyName string `json:"company_name,omitempty"`
    // The user's requested groups.
    Groups []GroupRequest `json:"groups,omitempty"`
    // The user's job title.
    JobTitle string `json:"job_title,omitempty"`
    // The user's permission profile.
    PermissionProfile *PermissionProfileRequest `json:"permission_profile,omitempty"`
    // If **true**, send an activation request after the update.
    SendActivation bool `json:"send_activation,omitempty"`
}

// UpdateResponse is a response.
type UpdateResponse struct { 
    // The status of the request.
    // 
    Status string `json:"status,omitempty"`
}

// UpdateUserEmailRequest and individual change of email.
type UpdateUserEmailRequest struct { 
    // The new email address.
    Email string `json:"email,omitempty"`
    // The ID of the users whose email address you want to change.
    ID string `json:"id,omitempty"`
    // The site ID.
    SiteID int32 `json:"site_id,omitempty"`
}

// UpdateUserRequest request to change a user's information.
type UpdateUserRequest struct { 
    // The account ID of the user's default account.
    DefaultAccountID string `json:"default_account_id,omitempty"`
    // 
    DeviceVerificationEnabled bool `json:"device_verification_enabled,omitempty"`
    // The email address.
    Email string `json:"email,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // If **true**, the user will be required to change the account password.
    ForcePasswordChange bool `json:"force_password_change,omitempty"`
    // The user's unique ID.
    ID string `json:"id,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // A list of group membership requests.
    Memberships []UpdateMembershipRequest `json:"memberships,omitempty"`
    // 
    SelectedLanguages string `json:"selected_languages,omitempty"`
    // The site ID.
    SiteID int32 `json:"site_id,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
}

// UpdateUsersEmailRequest is a change email request.
type UpdateUsersEmailRequest struct { 
    // A list of users whose email address to change.
    Users []UpdateUserEmailRequest `json:"users,omitempty"`
}

// UpdateUsersRequest is a list of users whose information you want to change.
type UpdateUsersRequest struct { 
    // A list of users whose information you want to change.
    Users []UpdateUserRequest `json:"users,omitempty"`
}

// UserDrilldownResponse information about a user.
type UserDrilldownResponse struct { 
    // The date the user's account was created.
    CreatedOn string `json:"created_on,omitempty"`
    // The ID of the user's default account.
    DefaultAccountID string `json:"default_account_id,omitempty"`
    // The name of the user's default account.
    DefaultAccountName string `json:"default_account_name,omitempty"`
    // 
    DeviceVerificationEnabled bool `json:"device_verification_enabled,omitempty"`
    // The user's federated status. One of:
    // 
    // - `RemoveStatus`
    // - `FedAuthRequired`
    // - `FedAuthBypass`
    // - `Evicted`
    // 
    FederatedStatus string `json:"federated_status,omitempty"`
    // The user's first name.
    FirstName string `json:"first_name,omitempty"`
    // The user's unique ID.
    ID string `json:"id,omitempty"`
    // A list of identities associated with the user.
    Identities []UserIdentityResponse `json:"identities,omitempty"`
    // If **true**, the user has organization administration privileges.
    IsOrganizationAdmin bool `json:"is_organization_admin,omitempty"`
    // The language and culture of the user.
    // 
    //   * Chinese Simplified: `zh_CN`
    //   * Chinese Traditional: `zh_TW`
    //   * Dutch: `nl`
    //   * English: `en`
    //   * French: `fr`
    //   * German: `de`
    //   * Italian: `it`
    //   * Japanese: `ja`
    //   * Korean: `ko`
    //   * Portuguese: `pt`
    //   * Portuguese Brazil: `pt_BR`
    //   * Russian: `ru`
    //   * Spanish: `es`
    // 
    LanguageCulture string `json:"language_culture,omitempty"`
    // The last time the user logged in.
    LastLogin string `json:"last_login,omitempty"`
    // The user's last name.
    LastName string `json:"last_name,omitempty"`
    // A list of organizations that have groups that the user is a member of.
    Memberships []MembershipResponse `json:"memberships,omitempty"`
    // 
    SelectedLanguages string `json:"selected_languages,omitempty"`
    // The site ID of the organization.
    SiteID int32 `json:"site_id,omitempty"`
    // The site name of the account.
    SiteName string `json:"site_name,omitempty"`
    // The full name of the user.
    UserName string `json:"user_name,omitempty"`
    // The user's status. One of:
    // 
    // - `active`
    // - `created`
    // - `closed`
    // 
    UserStatus string `json:"user_status,omitempty"`
}

// UserIdentityRequest user identity,
type UserIdentityRequest struct { 
    // The ID of the identity.
    ID string `json:"id,omitempty"`
}

// UserIdentityResponse results of deleting a user identity.
type UserIdentityResponse struct { 
    // Error results.
    ErrorDetails *ErrorDetails `json:"error_details,omitempty"`
    // The ID of the result.
    ID string `json:"id,omitempty"`
    // A unique ID to identify the removed user.
    ImmutableID string `json:"immutable_id,omitempty"`
    // The ID of the identity provider.
    ProviderID string `json:"provider_id,omitempty"`
    // The user ID.
    UserID string `json:"user_id,omitempty"`
}

type UserProductPermissionProfilesResponse struct { 
    // Select users that are members of the specified account. At least one of `email`, `account_id` or `organization_reserved_domain_id` must be specified.
    AccountID string `json:"account_id,omitempty"`
    // 
    ProductPermissionProfiles []ProductPermissionProfileResponse `json:"product_permission_profiles,omitempty"`
    // 
    UserID string `json:"user_id,omitempty"`
}

// UserUpdateResponse error result of attempting to change a user's email address.
type UserUpdateResponse struct { 
    // The email address.
    Email string `json:"email,omitempty"`
    // Error results.
    ErrorDetails *ErrorDetails `json:"error_details,omitempty"`
    // The ID of the user whose email address has been updated.
    ID string `json:"id,omitempty"`
    // The site ID.
    SiteID int32 `json:"site_id,omitempty"`
}

// UsersDrilldownResponse information about a list of users.
type UsersDrilldownResponse struct { 
    // A list of users.
    Users []UserDrilldownResponse `json:"users,omitempty"`
}

// UsersUpdateResponse is the results of changing a user's information.
type UsersUpdateResponse struct { 
    // If **true**, the request to change user information succeeded.
    Success bool `json:"success,omitempty"`
    // A list of users whose email addresses have been updated.
    Users []UserUpdateResponse `json:"users,omitempty"`
}

