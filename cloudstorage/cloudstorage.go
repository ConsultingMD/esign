// Copyright 2017 James Cote and Liberty Fund, Inc.
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-swagger; DO NOT EDIT.

// Package cloudstorage implements the DocuSign SDK
// category CloudStorage.
// 
// Use the Cloud Storage category to list the user's cloud storage document contents.
// 
// It is also used to manage the user's authentication/accounts with cloud storage service providers.
// Api documentation may be found at:
// https://docs.docusign.com/esign/restapi/CloudStorage
package cloudstorage

import (
    "fmt"
    "net/url"
    "strings"
    
    "golang.org/x/net/context"
    
    "github.com/jfcote87/esign"
    "github.com/jfcote87/esign/model"
)

// Service generates DocuSign CloudStorage Category API calls
type Service struct {
    credential esign.Credential 
}

// New initializes a cloudstorage service using cred to authorize calls.
func New(cred esign.Credential) *Service {
    return &Service{credential: cred}
}

// List gets a list of all the items from the specified cloud storage provider.
// SDK Method CloudStorage::list
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorage/list
func (s *Service) List(folderID string, serviceID string, userID string) *ListCall {
    return &ListCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "users/{userId}/cloud_storage/{serviceId}/folders/{folderId}",
            PathParameters: map[string]string{ 
                "{folderId}": folderID,
                "{serviceId}": serviceID,
                "{userId}": userID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListCall implements DocuSign API SDK CloudStorage::list
type ListCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListCall) Do(ctx context.Context)  (*model.ExternalFolder, error) {
    var res *model.ExternalFolder
    return res, op.Call.Do(ctx, &res)
}

// CloudStorageFolderPath set the call query parameter cloud_storage_folder_path
func (op *ListCall) CloudStorageFolderPath(val string) *ListCall {
    op.QueryOpts.Set("cloud_storage_folder_path", val)
    return op
}

// Count is an optional value that sets how many items are included in the response. 
// 
// The default setting for this is 25.
func (op *ListCall) Count(val int) *ListCall {
    op.QueryOpts.Set("count", fmt.Sprintf("%d", val ))
    return op
}

// Order is an optional value that sets the direction order used to sort the item list. 
// 
// Valid values are: 
// 
// * asc = ascending sort order
// * desc = descending sort order
func (op *ListCall) Order(val string) *ListCall {
    op.QueryOpts.Set("order", val)
    return op
}

// OrderBy is an optional value that sets the file attribute used to sort the item list. 
// 
// Valid values are: 
// 
// * modified
// * name
func (op *ListCall) OrderBy(val string) *ListCall {
    op.QueryOpts.Set("order_by", val)
    return op
}

// SearchText set the call query parameter search_text
func (op *ListCall) SearchText(val string) *ListCall {
    op.QueryOpts.Set("search_text", val)
    return op
}

// StartPosition indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.
func (op *ListCall) StartPosition(val int) *ListCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// ListFolders retrieves a list of all the items in a specified folder from the specified cloud storage provider.
// SDK Method CloudStorage::listFolders
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorage/listFolders
func (s *Service) ListFolders(serviceID string, userID string) *ListFoldersCall {
    return &ListFoldersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "users/{userId}/cloud_storage/{serviceId}/folders",
            PathParameters: map[string]string{ 
                "{serviceId}": serviceID,
                "{userId}": userID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListFoldersCall implements DocuSign API SDK CloudStorage::listFolders
type ListFoldersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListFoldersCall) Do(ctx context.Context)  (*model.ExternalFolder, error) {
    var res *model.ExternalFolder
    return res, op.Call.Do(ctx, &res)
}

// CloudStorageFolderPath is a comma separated list of folder IDs included in the request.
func (op *ListFoldersCall) CloudStorageFolderPath(val ...string) *ListFoldersCall {
    op.QueryOpts.Set("cloud_storage_folder_path", strings.Join(val,","))
    return op
}

// Count is an optional value that sets how many items are included in the response. 
// 
// The default setting for this is 25.
func (op *ListFoldersCall) Count(val int) *ListFoldersCall {
    op.QueryOpts.Set("count", fmt.Sprintf("%d", val ))
    return op
}

// Order is an optional value that sets the direction order used to sort the item list. 
// 
// Valid values are: 
// 
// * asc = ascending sort order
// * desc = descending sort order
func (op *ListFoldersCall) Order(val string) *ListFoldersCall {
    op.QueryOpts.Set("order", val)
    return op
}

// OrderBy is an optional value that sets the file attribute used to sort the item list. 
// 
// Valid values are: 
// 
// * modified
// * name
func (op *ListFoldersCall) OrderBy(val string) *ListFoldersCall {
    op.QueryOpts.Set("order_by", val)
    return op
}

// SearchText set the call query parameter search_text
func (op *ListFoldersCall) SearchText(val string) *ListFoldersCall {
    op.QueryOpts.Set("search_text", val)
    return op
}

// StartPosition indicates the starting point of the first item included in the response set. It uses a 0-based index. The default setting for this is 0.
func (op *ListFoldersCall) StartPosition(val int) *ListFoldersCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// DeleteProvider deletes the user authentication information for the specified cloud storage provider.
// SDK Method CloudStorage::deleteProvider
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorageProviders/delete
func (s *Service) DeleteProvider(serviceID string, userID string) *DeleteProviderCall {
    return &DeleteProviderCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "users/{userId}/cloud_storage/{serviceId}",
            PathParameters: map[string]string{ 
                "{serviceId}": serviceID,
                "{userId}": userID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteProviderCall implements DocuSign API SDK CloudStorage::deleteProvider
type DeleteProviderCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteProviderCall) Do(ctx context.Context)  (*model.CloudStorageProviders, error) {
    var res *model.CloudStorageProviders
    return res, op.Call.Do(ctx, &res)
}

// DeleteProviders deletes the user authentication information for one or more cloud storage providers.
// SDK Method CloudStorage::deleteProviders
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorageProviders/deleteList
func (s *Service) DeleteProviders(userID string, cloudStorageProviders *model.CloudStorageProviders) *DeleteProvidersCall {
    return &DeleteProvidersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "users/{userId}/cloud_storage",
            PathParameters: map[string]string{ 
                "{userId}": userID,
            },
            Payload: cloudStorageProviders,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteProvidersCall implements DocuSign API SDK CloudStorage::deleteProviders
type DeleteProvidersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteProvidersCall) Do(ctx context.Context)  (*model.CloudStorageProviders, error) {
    var res *model.CloudStorageProviders
    return res, op.Call.Do(ctx, &res)
}

// GetProvider gets the specified Cloud Storage Provider configuration for the User.
// SDK Method CloudStorage::getProvider
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorageProviders/get
func (s *Service) GetProvider(serviceID string, userID string) *GetProviderCall {
    return &GetProviderCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "users/{userId}/cloud_storage/{serviceId}",
            PathParameters: map[string]string{ 
                "{serviceId}": serviceID,
                "{userId}": userID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetProviderCall implements DocuSign API SDK CloudStorage::getProvider
type GetProviderCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetProviderCall) Do(ctx context.Context)  (*model.CloudStorageProviders, error) {
    var res *model.CloudStorageProviders
    return res, op.Call.Do(ctx, &res)
}

// RedirectURL is the URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
// 
// The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
func (op *GetProviderCall) RedirectURL(val string) *GetProviderCall {
    op.QueryOpts.Set("redirectUrl", val)
    return op
}

// ListProviders get the Cloud Storage Provider configuration for the specified user.
// SDK Method CloudStorage::listProviders
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorageProviders/list
func (s *Service) ListProviders(userID string) *ListProvidersCall {
    return &ListProvidersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "users/{userId}/cloud_storage",
            PathParameters: map[string]string{ 
                "{userId}": userID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListProvidersCall implements DocuSign API SDK CloudStorage::listProviders
type ListProvidersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListProvidersCall) Do(ctx context.Context)  (*model.CloudStorageProviders, error) {
    var res *model.CloudStorageProviders
    return res, op.Call.Do(ctx, &res)
}

// RedirectURL is the URL the user is redirected to after the cloud storage provider authenticates the user. Using this will append the redirectUrl to the authenticationUrl.
// 
// The redirectUrl is restricted to URLs in the docusign.com or docusign.net domains.
func (op *ListProvidersCall) RedirectURL(val string) *ListProvidersCall {
    op.QueryOpts.Set("redirectUrl", val)
    return op
}

// CreateProvider configures the redirect URL information  for one or more cloud storage providers for the specified user.
// SDK Method CloudStorage::createProvider
// https://docs.docusign.com/esign/restapi/CloudStorage/CloudStorageProviders/create
func (s *Service) CreateProvider(userID string, cloudStorageProviders *model.CloudStorageProviders) *CreateProviderCall {
    return &CreateProviderCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "users/{userId}/cloud_storage",
            PathParameters: map[string]string{ 
                "{userId}": userID,
            },
            Payload: cloudStorageProviders,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateProviderCall implements DocuSign API SDK CloudStorage::createProvider
type CreateProviderCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateProviderCall) Do(ctx context.Context)  (*model.CloudStorageProviders, error) {
    var res *model.CloudStorageProviders
    return res, op.Call.Do(ctx, &res)
}

