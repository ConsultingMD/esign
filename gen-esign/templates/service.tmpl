// Copyright 2017 James Cote and Liberty Fund, Inc.
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-swagger; DO NOT EDIT.

// Package {{.Package}} implements the DocuSign SDK
// category {{.Service}}.
// {{range .Comments}}
// {{.}}{{end}}
// Api documentation may be found at:
// https://docs.docusign.com/esign/restapi/{{.Service}}
package {{.Package}}{{ $defMap := .DefMap}}{{ $propOverrides := .PropOverrides}}{{$opOverrides := .OpOverrides}}

import ({{range .Packages}}
    {{.}}{{end}}
)

// Service generates DocuSign {{.Service}} Category API calls
type Service struct {
    credential esign.Credential 
}

// New initializes a {{.Package}} service using cred to authorize calls.
func New(cred esign.Credential) *Service {
    return &Service{credential: cred}
}

{{ range .Operations }}{{$funcName := .GoFuncName $opOverrides}}{{$pathParams := .PathParameters}}{{$payload := .Payload $defMap}}{{$queryOpts := .QueryOpts $propOverrides}}{{$result := .Result $defMap}}{{range .CommentLines $funcName}}// {{.}}
{{end}}func (s *Service) {{$funcName}}({{range $i, $p := $pathParams}}{{if $i}}, {{end}}{{$p.GoName}} string{{end}}{{if $payload}}{{if len $pathParams}}, {{end}}{{$payload.GoName}} {{$payload.Type}}{{end}}) *{{$funcName}}Call {
    return &{{$funcName}}Call{
        &esign.Call{
            Credential: s.credential,
    		Method:  "{{.HTTPMethod}}",
            Path: "{{.CallPath}}",
            {{if len $pathParams}}PathParameters: map[string]string{ {{range $pathParams}}
                "{{"{"}}{{.Name}}{{"}"}}": {{.GoName}},{{end}}
            },
            {{end}}{{if $payload}}Payload: {{$payload.GoName}},
            {{end}}QueryOpts: make(url.Values),
        },
    }
}

// {{$funcName}}Call implements DocuSign API SDK {{.SDK}}
type {{$funcName}}Call struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *{{$funcName}}Call) Do(ctx context.Context)  {{if $result}}({{$result}}, error){{else}}error{{end}} {
    {{if $result}}var res {{$result}}{{end}}
    return {{if $result}}res, {{end}}op.Call.Do(ctx, {{if $result}}&res{{else}}nil{{end}})
}

{{range $queryOpts}}{{range .Comments}}// {{.}}
{{end}}func (op *{{$funcName}}Call) {{.GoName}}({{if ne .Type "bool"}}val {{.Type}}{{end}}) *{{$funcName}}Call {
    op.QueryOpts.Set("{{.Name}}", {{.Value}})
    return op
}

{{end}}{{end}}