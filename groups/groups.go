// Copyright 2019 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package groups implements the DocuSign SDK
// category Groups.
//
//
//
// Api documentation may be found at:
// https://developers.docusign.com/esign/restapi/Groups
// Usage example:
//
//   import (
//       "github.com/jfcote87/esign"
//       "github.com/jfcote87/esign/groups"
//   )
//   ...
//   groupsService := groups.New(esignCredential)
package groups

import (
	"context"
	"fmt"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/model"
)

// Service implements DocuSign Groups Category API operations
type Service struct {
	credential esign.Credential
}

// New initializes a groups service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// BrandsDelete deletes brand information from the requested group.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/GroupBrands/delete
//
// SDK Method Groups::deleteBrands
func (s *Service) BrandsDelete(groupID string, brandsRequest *model.BrandsRequest) *BrandsDeleteOp {
	return &BrandsDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"groups", groupID, "brands"}, "/"),
		Payload:    brandsRequest,
		QueryOpts:  make(url.Values),
	}
}

// BrandsDeleteOp implements DocuSign API SDK Groups::deleteBrands
type BrandsDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsDeleteOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsGet gets group brand ID Information.
//
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/GroupBrands/get
//
// SDK Method Groups::getBrands
func (s *Service) BrandsGet(groupID string) *BrandsGetOp {
	return &BrandsGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"groups", groupID, "brands"}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// BrandsGetOp implements DocuSign API SDK Groups::getBrands
type BrandsGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsGetOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsUpdate adds group brand ID information to a group.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/GroupBrands/update
//
// SDK Method Groups::updateBrands
func (s *Service) BrandsUpdate(groupID string, brandsRequest *model.BrandsRequest) *BrandsUpdateOp {
	return &BrandsUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"groups", groupID, "brands"}, "/"),
		Payload:    brandsRequest,
		QueryOpts:  make(url.Values),
	}
}

// BrandsUpdateOp implements DocuSign API SDK Groups::updateBrands
type BrandsUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsUpdateOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UsersDelete deletes one or more users from a gro
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/GroupUsers/delete
//
// SDK Method Groups::deleteGroupUsers
func (s *Service) UsersDelete(groupID string, userInfoList *model.UserInfoList) *UsersDeleteOp {
	return &UsersDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"groups", groupID, "users"}, "/"),
		Payload:    userInfoList,
		QueryOpts:  make(url.Values),
	}
}

// UsersDeleteOp implements DocuSign API SDK Groups::deleteGroupUsers
type UsersDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UsersDeleteOp) Do(ctx context.Context) (*model.UsersResponse, error) {
	var res *model.UsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// UsersList gets a list of users in a group.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/GroupUsers/list
//
// SDK Method Groups::listGroupUsers
func (s *Service) UsersList(groupID string) *UsersListOp {
	return &UsersListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"groups", groupID, "users"}, "/"),
		QueryOpts:  make(url.Values),
	}
}

// UsersListOp implements DocuSign API SDK Groups::listGroupUsers
type UsersListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UsersListOp) Do(ctx context.Context) (*model.UsersResponse, error) {
	var res *model.UsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count number of records to return. The number must be greater than 1 and less than or equal to 100.
func (op *UsersListOp) Count(val int) *UsersListOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// StartPosition starting value for the list.
func (op *UsersListOp) StartPosition(val int) *UsersListOp {
	if op != nil {
		op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val))
	}
	return op
}

// UsersUpdate adds one or more users to an existing group.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/GroupUsers/update
//
// SDK Method Groups::updateGroupUsers
func (s *Service) UsersUpdate(groupID string, userInfoList *model.UserInfoList) *UsersUpdateOp {
	return &UsersUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"groups", groupID, "users"}, "/"),
		Payload:    userInfoList,
		QueryOpts:  make(url.Values),
	}
}

// UsersUpdateOp implements DocuSign API SDK Groups::updateGroupUsers
type UsersUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UsersUpdateOp) Do(ctx context.Context) (*model.UsersResponse, error) {
	var res *model.UsersResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Create creates one or more groups for the account.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/Groups/create
//
// SDK Method Groups::createGroups
func (s *Service) Create(groups *model.GroupInformation) *CreateOp {
	return &CreateOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "groups",
		Payload:    groups,
		QueryOpts:  make(url.Values),
	}
}

// CreateOp implements DocuSign API SDK Groups::createGroups
type CreateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *CreateOp) Do(ctx context.Context) (*model.GroupInformation, error) {
	var res *model.GroupInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Delete deletes an existing user group.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/Groups/delete
//
// SDK Method Groups::deleteGroups
func (s *Service) Delete(groups *model.GroupInformation) *DeleteOp {
	return &DeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       "groups",
		Payload:    groups,
		QueryOpts:  make(url.Values),
	}
}

// DeleteOp implements DocuSign API SDK Groups::deleteGroups
type DeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *DeleteOp) Do(ctx context.Context) (*model.GroupInformation, error) {
	var res *model.GroupInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// List gets information about groups associated with the account.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/Groups/list
//
// SDK Method Groups::listGroups
func (s *Service) List() *ListOp {
	return &ListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "groups",
		QueryOpts:  make(url.Values),
	}
}

// ListOp implements DocuSign API SDK Groups::listGroups
type ListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *ListOp) Do(ctx context.Context) (*model.GroupInformation, error) {
	var res *model.GroupInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count number of records to return. The number must be greater than 1 and less than or equal to 100.
func (op *ListOp) Count(val int) *ListOp {
	if op != nil {
		op.QueryOpts.Set("count", fmt.Sprintf("%d", val))
	}
	return op
}

// GroupType set the call query parameter group_type
func (op *ListOp) GroupType(val string) *ListOp {
	if op != nil {
		op.QueryOpts.Set("group_type", val)
	}
	return op
}

// SearchText set the call query parameter search_text
func (op *ListOp) SearchText(val string) *ListOp {
	if op != nil {
		op.QueryOpts.Set("search_text", val)
	}
	return op
}

// StartPosition starting value for the list.
func (op *ListOp) StartPosition(val int) *ListOp {
	if op != nil {
		op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val))
	}
	return op
}

// Update updates the group information for a group.
//
// https://developers.docusign.com/esign-rest-api/reference/Groups/Groups/update
//
// SDK Method Groups::updateGroups
func (s *Service) Update(groups *model.GroupInformation) *UpdateOp {
	return &UpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       "groups",
		Payload:    groups,
		QueryOpts:  make(url.Values),
	}
}

// UpdateOp implements DocuSign API SDK Groups::updateGroups
type UpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *UpdateOp) Do(ctx context.Context) (*model.GroupInformation, error) {
	var res *model.GroupInformation
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}
