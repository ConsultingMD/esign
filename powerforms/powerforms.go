// Copyright 2017 James Cote and Liberty Fund, Inc.
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-swagger; DO NOT EDIT.

// Package powerforms implements the DocuSign SDK
// category PowerForms.
// 
// The PowerForms category enables PowerForms to be created and managed.
// Api documentation may be found at:
// https://docs.docusign.com/esign/restapi/PowerForms
package powerforms

import (
    "fmt"
    "net/url"
    "time"
    
    "golang.org/x/net/context"
    
    "mystuff/esign"
    "mystuff/esign/model"
)

// Service generates DocuSign PowerForms Category API calls
type Service struct {
    credential esign.Credential 
}

// New initializes a powerforms service using cred to authorize calls.
func New(cred esign.Credential) *Service {
    return &Service{credential: cred}
}

// DeletePowerForm delete a PowerForm.
// SDK Method PowerForms::deletePowerForm
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/delete
func (s *Service) DeletePowerForm(powerFormID string) *DeletePowerFormCall {
    return &DeletePowerFormCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "powerforms/{powerFormId}",
            PathParameters: map[string]string{ 
                "{powerFormId}": powerFormID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeletePowerFormCall implements DocuSign API SDK PowerForms::deletePowerForm
type DeletePowerFormCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeletePowerFormCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// DeletePowerForms deletes one or more PowerForms
// SDK Method PowerForms::deletePowerForms
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/deleteList
func (s *Service) DeletePowerForms(powerFormsRequest *model.PowerFormsRequest) *DeletePowerFormsCall {
    return &DeletePowerFormsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "powerforms",
            Payload: powerFormsRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// DeletePowerFormsCall implements DocuSign API SDK PowerForms::deletePowerForms
type DeletePowerFormsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeletePowerFormsCall) Do(ctx context.Context)  (*model.PowerFormsResponse, error) {
    var res *model.PowerFormsResponse
    return res, op.Call.Do(ctx, &res)
}

// GetPowerForm returns a single PowerForm.
// SDK Method PowerForms::getPowerForm
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/get
func (s *Service) GetPowerForm(powerFormID string) *GetPowerFormCall {
    return &GetPowerFormCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "powerforms/{powerFormId}",
            PathParameters: map[string]string{ 
                "{powerFormId}": powerFormID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetPowerFormCall implements DocuSign API SDK PowerForms::getPowerForm
type GetPowerFormCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetPowerFormCall) Do(ctx context.Context)  (*model.PowerForm, error) {
    var res *model.PowerForm
    return res, op.Call.Do(ctx, &res)
}

// GetPowerFormData returns the form data associated with the usage of a PowerForm.
// SDK Method PowerForms::getPowerFormData
// https://docs.docusign.com/esign/restapi/PowerForms/PowerFormData/list
func (s *Service) GetPowerFormData(powerFormID string) *GetPowerFormDataCall {
    return &GetPowerFormDataCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "powerforms/{powerFormId}/form_data",
            PathParameters: map[string]string{ 
                "{powerFormId}": powerFormID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetPowerFormDataCall implements DocuSign API SDK PowerForms::getPowerFormData
type GetPowerFormDataCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetPowerFormDataCall) Do(ctx context.Context)  (*model.PowerFormsFormDataResponse, error) {
    var res *model.PowerFormsFormDataResponse
    return res, op.Call.Do(ctx, &res)
}

// FromDate start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
func (op *GetPowerFormDataCall) FromDate(val time.Time) *GetPowerFormDataCall {
    op.QueryOpts.Set("from_date", val.Format(time.RFC3339))
    return op
}

// ToDate end of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
func (op *GetPowerFormDataCall) ToDate(val time.Time) *GetPowerFormDataCall {
    op.QueryOpts.Set("to_date", val.Format(time.RFC3339))
    return op
}

// ListPowerForms returns the list of PowerForms available to the user.
// SDK Method PowerForms::listPowerForms
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/list
func (s *Service) ListPowerForms() *ListPowerFormsCall {
    return &ListPowerFormsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "powerforms",
            QueryOpts: make(url.Values),
        },
    }
}

// ListPowerFormsCall implements DocuSign API SDK PowerForms::listPowerForms
type ListPowerFormsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListPowerFormsCall) Do(ctx context.Context)  (*model.PowerFormsResponse, error) {
    var res *model.PowerFormsResponse
    return res, op.Call.Do(ctx, &res)
}

// FromDate start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
func (op *ListPowerFormsCall) FromDate(val time.Time) *ListPowerFormsCall {
    op.QueryOpts.Set("from_date", val.Format(time.RFC3339))
    return op
}

// Order is an optional value that sets the direction order used to sort the item list. 
// 
// Valid values are: 
// 
// * asc = ascending sort order
// * desc = descending sort order
func (op *ListPowerFormsCall) Order(val string) *ListPowerFormsCall {
    op.QueryOpts.Set("order", val)
    return op
}

// OrderBy is an optional value that sets the file attribute used to sort the item list. 
// 
// Valid values are: 
// 
// * modified
// * name
func (op *ListPowerFormsCall) OrderBy(val string) *ListPowerFormsCall {
    op.QueryOpts.Set("order_by", val)
    return op
}

// ToDate end of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
func (op *ListPowerFormsCall) ToDate(val time.Time) *ListPowerFormsCall {
    op.QueryOpts.Set("to_date", val.Format(time.RFC3339))
    return op
}

// ListPowerFormSenders returns the list of PowerForms available to the user.
// SDK Method PowerForms::listPowerFormSenders
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/listSenders
func (s *Service) ListPowerFormSenders() *ListPowerFormSendersCall {
    return &ListPowerFormSendersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "powerforms/senders",
            QueryOpts: make(url.Values),
        },
    }
}

// ListPowerFormSendersCall implements DocuSign API SDK PowerForms::listPowerFormSenders
type ListPowerFormSendersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListPowerFormSendersCall) Do(ctx context.Context)  (*model.PowerFormSendersResponse, error) {
    var res *model.PowerFormSendersResponse
    return res, op.Call.Do(ctx, &res)
}

// StartPosition is the position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
func (op *ListPowerFormSendersCall) StartPosition(val int) *ListPowerFormSendersCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// CreatePowerForm creates a new PowerForm.
// SDK Method PowerForms::createPowerForm
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/create
func (s *Service) CreatePowerForm(powerForms *model.PowerForm) *CreatePowerFormCall {
    return &CreatePowerFormCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "powerforms",
            Payload: powerForms,
            QueryOpts: make(url.Values),
        },
    }
}

// CreatePowerFormCall implements DocuSign API SDK PowerForms::createPowerForm
type CreatePowerFormCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreatePowerFormCall) Do(ctx context.Context)  (*model.PowerForm, error) {
    var res *model.PowerForm
    return res, op.Call.Do(ctx, &res)
}

// UpdatePowerForm creates a new PowerForm.
// SDK Method PowerForms::updatePowerForm
// https://docs.docusign.com/esign/restapi/PowerForms/PowerForms/update
func (s *Service) UpdatePowerForm(powerFormID string, powerForms *model.PowerForm) *UpdatePowerFormCall {
    return &UpdatePowerFormCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "powerforms/{powerFormId}",
            PathParameters: map[string]string{ 
                "{powerFormId}": powerFormID,
            },
            Payload: powerForms,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdatePowerFormCall implements DocuSign API SDK PowerForms::updatePowerForm
type UpdatePowerFormCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdatePowerFormCall) Do(ctx context.Context)  (*model.PowerForm, error) {
    var res *model.PowerForm
    return res, op.Call.Do(ctx, &res)
}

