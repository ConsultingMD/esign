// Copyright 2017 James Cote and Liberty Fund, Inc.
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-swagger; DO NOT EDIT.

// Package signinggroups implements the DocuSign SDK
// category SigningGroups.
// 
// Use the SigningGroup category to manage signing groups that allow you anyone in the group to sign a document.
// 
// The category allows you create the signing group and manage the users in the group.
// Api documentation may be found at:
// https://docs.docusign.com/esign/restapi/SigningGroups
package signinggroups

import (
    "net/url"
    
    "golang.org/x/net/context"
    
    "mystuff/esign"
    "mystuff/esign/model"
)

// Service generates DocuSign SigningGroups Category API calls
type Service struct {
    credential esign.Credential 
}

// New initializes a signinggroups service using cred to authorize calls.
func New(cred esign.Credential) *Service {
    return &Service{credential: cred}
}

// DeleteUsers deletes  one or more members from a signing group.
// SDK Method SigningGroups::deleteUsers
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroupUsers/delete
func (s *Service) DeleteUsers(signingGroupID string, signingGroupUsers *model.SigningGroupUsers) *DeleteUsersCall {
    return &DeleteUsersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "signing_groups/{signingGroupId}/users",
            PathParameters: map[string]string{ 
                "{signingGroupId}": signingGroupID,
            },
            Payload: signingGroupUsers,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteUsersCall implements DocuSign API SDK SigningGroups::deleteUsers
type DeleteUsersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteUsersCall) Do(ctx context.Context)  (*model.SigningGroupUsers, error) {
    var res *model.SigningGroupUsers
    return res, op.Call.Do(ctx, &res)
}

// DeleteList deletes one or more signing groups.
// SDK Method SigningGroups::deleteList
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroups/delete
func (s *Service) DeleteList(signingGroupInformation *model.SigningGroupInformation) *DeleteListCall {
    return &DeleteListCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "signing_groups",
            Payload: signingGroupInformation,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteListCall implements DocuSign API SDK SigningGroups::deleteList
type DeleteListCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteListCall) Do(ctx context.Context)  (*model.SigningGroupInformation, error) {
    var res *model.SigningGroupInformation
    return res, op.Call.Do(ctx, &res)
}

// Get gets information about a signing group. 
// SDK Method SigningGroups::get
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroups/get
func (s *Service) Get(signingGroupID string) *GetCall {
    return &GetCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "signing_groups/{signingGroupId}",
            PathParameters: map[string]string{ 
                "{signingGroupId}": signingGroupID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetCall implements DocuSign API SDK SigningGroups::get
type GetCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetCall) Do(ctx context.Context)  (*model.SigningGroup, error) {
    var res *model.SigningGroup
    return res, op.Call.Do(ctx, &res)
}

// ListUsers gets a list of members in a Signing Group.
// SDK Method SigningGroups::listUsers
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroupUsers/list
func (s *Service) ListUsers(signingGroupID string) *ListUsersCall {
    return &ListUsersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "signing_groups/{signingGroupId}/users",
            PathParameters: map[string]string{ 
                "{signingGroupId}": signingGroupID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListUsersCall implements DocuSign API SDK SigningGroups::listUsers
type ListUsersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListUsersCall) Do(ctx context.Context)  (*model.SigningGroupUsers, error) {
    var res *model.SigningGroupUsers
    return res, op.Call.Do(ctx, &res)
}

// List gets a list of the Signing Groups in an account.
// SDK Method SigningGroups::list
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroups/list
func (s *Service) List() *ListCall {
    return &ListCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "signing_groups",
            QueryOpts: make(url.Values),
        },
    }
}

// ListCall implements DocuSign API SDK SigningGroups::list
type ListCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListCall) Do(ctx context.Context)  (*model.SigningGroupInformation, error) {
    var res *model.SigningGroupInformation
    return res, op.Call.Do(ctx, &res)
}

// GroupType set the call query parameter group_type
func (op *ListCall) GroupType(val string) *ListCall {
    op.QueryOpts.Set("group_type", val)
    return op
}

// IncludeUsers when set to **true**, the response includes the signing group members.
func (op *ListCall) IncludeUsers() *ListCall {
    op.QueryOpts.Set("include_users", "true")
    return op
}

// CreateList creates a signing group. 
// SDK Method SigningGroups::createList
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroups/create
func (s *Service) CreateList(signingGroupInformation *model.SigningGroupInformation) *CreateListCall {
    return &CreateListCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "signing_groups",
            Payload: signingGroupInformation,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateListCall implements DocuSign API SDK SigningGroups::createList
type CreateListCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateListCall) Do(ctx context.Context)  (*model.SigningGroupInformation, error) {
    var res *model.SigningGroupInformation
    return res, op.Call.Do(ctx, &res)
}

// Update updates a signing group. 
// SDK Method SigningGroups::update
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroups/update
func (s *Service) Update(signingGroupID string, signingGroups *model.SigningGroup) *UpdateCall {
    return &UpdateCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "signing_groups/{signingGroupId}",
            PathParameters: map[string]string{ 
                "{signingGroupId}": signingGroupID,
            },
            Payload: signingGroups,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateCall implements DocuSign API SDK SigningGroups::update
type UpdateCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateCall) Do(ctx context.Context)  (*model.SigningGroup, error) {
    var res *model.SigningGroup
    return res, op.Call.Do(ctx, &res)
}

// UpdateUsers adds members to a signing group. 
// SDK Method SigningGroups::updateUsers
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroupUsers/update
func (s *Service) UpdateUsers(signingGroupID string, signingGroupUsers *model.SigningGroupUsers) *UpdateUsersCall {
    return &UpdateUsersCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "signing_groups/{signingGroupId}/users",
            PathParameters: map[string]string{ 
                "{signingGroupId}": signingGroupID,
            },
            Payload: signingGroupUsers,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateUsersCall implements DocuSign API SDK SigningGroups::updateUsers
type UpdateUsersCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateUsersCall) Do(ctx context.Context)  (*model.SigningGroupUsers, error) {
    var res *model.SigningGroupUsers
    return res, op.Call.Do(ctx, &res)
}

// UpdateList updates signing group names.
// SDK Method SigningGroups::updateList
// https://docs.docusign.com/esign/restapi/SigningGroups/SigningGroups/updateList
func (s *Service) UpdateList(signingGroupInformation *model.SigningGroupInformation) *UpdateListCall {
    return &UpdateListCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "signing_groups",
            Payload: signingGroupInformation,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateListCall implements DocuSign API SDK SigningGroups::updateList
type UpdateListCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateListCall) Do(ctx context.Context)  (*model.SigningGroupInformation, error) {
    var res *model.SigningGroupInformation
    return res, op.Call.Do(ctx, &res)
}

