// Copyright 2017 James Cote and Liberty Fund, Inc.
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by go-swagger; DO NOT EDIT.

// Package templates implements the DocuSign SDK
// category Templates.
// 
// Use the Templates category to manage your account's templates.
// 
// You can:
// 
// * Create, list, get, update, and delete templates.
// * Manage templates' notification and group sharing settings.
// * Fetch and rotate pages from a document used by a template.
// 
// Templates can be created programmatically or can be created via the DocuSign web interface and then used by your application.
// Api documentation may be found at:
// https://docs.docusign.com/esign/restapi/Templates
package templates

import (
    "fmt"
    "net/url"
    "strings"
    "time"
    
    "golang.org/x/net/context"
    
    "github.com/jfcote87/esign"
    "github.com/jfcote87/esign/model"
)

// Service generates DocuSign Templates Category API calls
type Service struct {
    credential esign.Credential 
}

// New initializes a templates service using cred to authorize calls.
func New(cred esign.Credential) *Service {
    return &Service{credential: cred}
}

// DeleteCustomFields deletes envelope custom fields in a template.
// SDK Method Templates::deleteCustomFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateCustomFields/delete
func (s *Service) DeleteCustomFields(templateID string, templateCustomFields *model.TemplateCustomFields) *DeleteCustomFieldsCall {
    return &DeleteCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/custom_fields",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateCustomFields,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteCustomFieldsCall implements DocuSign API SDK Templates::deleteCustomFields
type DeleteCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// ListCustomFields gets the custom document fields from a template.
// SDK Method Templates::listCustomFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateCustomFields/list
func (s *Service) ListCustomFields(templateID string) *ListCustomFieldsCall {
    return &ListCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/custom_fields",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListCustomFieldsCall implements DocuSign API SDK Templates::listCustomFields
type ListCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// CreateCustomFields creates custom document fields in an existing template document.
// SDK Method Templates::createCustomFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateCustomFields/create
func (s *Service) CreateCustomFields(templateID string, templateCustomFields *model.TemplateCustomFields) *CreateCustomFieldsCall {
    return &CreateCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates/{templateId}/custom_fields",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateCustomFields,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateCustomFieldsCall implements DocuSign API SDK Templates::createCustomFields
type CreateCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// UpdateCustomFields updates envelope custom fields in a template.
// SDK Method Templates::updateCustomFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateCustomFields/update
func (s *Service) UpdateCustomFields(templateID string, templateCustomFields *model.TemplateCustomFields) *UpdateCustomFieldsCall {
    return &UpdateCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/custom_fields",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateCustomFields,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateCustomFieldsCall implements DocuSign API SDK Templates::updateCustomFields
type UpdateCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// DeleteDocumentFields deletes custom document fields from an existing template document.
// SDK Method Templates::deleteDocumentFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocumentFields/delete
func (s *Service) DeleteDocumentFields(documentID string, templateID string, templateDocumentFields *model.DocumentFieldsInformation) *DeleteDocumentFieldsCall {
    return &DeleteDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            Payload: templateDocumentFields,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteDocumentFieldsCall implements DocuSign API SDK Templates::deleteDocumentFields
type DeleteDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// ListDocumentFields gets the custom document fields for a an existing template document.
// SDK Method Templates::listDocumentFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocumentFields/list
func (s *Service) ListDocumentFields(documentID string, templateID string) *ListDocumentFieldsCall {
    return &ListDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListDocumentFieldsCall implements DocuSign API SDK Templates::listDocumentFields
type ListDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// CreateDocumentFields creates custom document fields in an existing template document.
// SDK Method Templates::createDocumentFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocumentFields/create
func (s *Service) CreateDocumentFields(documentID string, templateID string, templateDocumentFields *model.DocumentFieldsInformation) *CreateDocumentFieldsCall {
    return &CreateDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates/{templateId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            Payload: templateDocumentFields,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateDocumentFieldsCall implements DocuSign API SDK Templates::createDocumentFields
type CreateDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// UpdateDocumentFields updates existing custom document fields in an existing template document.
// SDK Method Templates::updateDocumentFields
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocumentFields/update
func (s *Service) UpdateDocumentFields(documentID string, templateID string, templateDocumentFields *model.DocumentFieldsInformation) *UpdateDocumentFieldsCall {
    return &UpdateDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            Payload: templateDocumentFields,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateDocumentFieldsCall implements DocuSign API SDK Templates::updateDocumentFields
type UpdateDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// DeleteDocuments deletes documents from a template.
// SDK Method Templates::deleteDocuments
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocuments/delete
func (s *Service) DeleteDocuments(templateID string, envelopeDefinition *model.EnvelopeDefinition) *DeleteDocumentsCall {
    return &DeleteDocumentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/documents",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: envelopeDefinition,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteDocumentsCall implements DocuSign API SDK Templates::deleteDocuments
type DeleteDocumentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteDocumentsCall) Do(ctx context.Context)  (*model.TemplateDocumentsResult, error) {
    var res *model.TemplateDocumentsResult
    return res, op.Call.Do(ctx, &res)
}

// GetDocument gets PDF documents from a template.
// SDK Method Templates::getDocument
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocuments/get
func (s *Service) GetDocument(documentID string, templateID string) *GetDocumentCall {
    return &GetDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents/{documentId}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetDocumentCall implements DocuSign API SDK Templates::getDocument
type GetDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetDocumentCall) Do(ctx context.Context)  (*esign.File, error) {
    var res *esign.File
    return res, op.Call.Do(ctx, &res)
}

// Encrypt set the call query parameter encrypt
func (op *GetDocumentCall) Encrypt() *GetDocumentCall {
    op.QueryOpts.Set("encrypt", "true")
    return op
}

// ShowChanges set the call query parameter show_changes
func (op *GetDocumentCall) ShowChanges() *GetDocumentCall {
    op.QueryOpts.Set("show_changes", "true")
    return op
}

// ListDocuments gets a list of documents associated with a template.
// SDK Method Templates::listDocuments
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocuments/list
func (s *Service) ListDocuments(templateID string) *ListDocumentsCall {
    return &ListDocumentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListDocumentsCall implements DocuSign API SDK Templates::listDocuments
type ListDocumentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListDocumentsCall) Do(ctx context.Context)  (*model.TemplateDocumentsResult, error) {
    var res *model.TemplateDocumentsResult
    return res, op.Call.Do(ctx, &res)
}

// UpdateDocument adds a document to a template document.
// SDK Method Templates::updateDocument
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocuments/update
func (s *Service) UpdateDocument(documentID string, templateID string, envelopeDefinition *model.EnvelopeDefinition) *UpdateDocumentCall {
    return &UpdateDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/documents/{documentId}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            Payload: envelopeDefinition,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateDocumentCall implements DocuSign API SDK Templates::updateDocument
type UpdateDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateDocumentCall) Do(ctx context.Context)  (*model.EnvelopeDocument, error) {
    var res *model.EnvelopeDocument
    return res, op.Call.Do(ctx, &res)
}

// ApplyDocumentFields when **true**, document fields
// can be added or modified
// while adding or modifying envelope documents.
func (op *UpdateDocumentCall) ApplyDocumentFields() *UpdateDocumentCall {
    op.QueryOpts.Set("apply_document_fields", "true")
    return op
}

// IsEnvelopeDefinition set the call query parameter is_envelope_definition
func (op *UpdateDocumentCall) IsEnvelopeDefinition() *UpdateDocumentCall {
    op.QueryOpts.Set("is_envelope_definition", "true")
    return op
}

// UpdateDocuments adds documents to a template document.
// SDK Method Templates::updateDocuments
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocuments/updateList
func (s *Service) UpdateDocuments(templateID string, envelopeDefinition *model.EnvelopeDefinition) *UpdateDocumentsCall {
    return &UpdateDocumentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/documents",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: envelopeDefinition,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateDocumentsCall implements DocuSign API SDK Templates::updateDocuments
type UpdateDocumentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateDocumentsCall) Do(ctx context.Context)  (*model.TemplateDocumentsResult, error) {
    var res *model.TemplateDocumentsResult
    return res, op.Call.Do(ctx, &res)
}

// ApplyDocumentFields when **true**, document fields
// can be added or modified
// while adding or modifying envelope documents.
func (op *UpdateDocumentsCall) ApplyDocumentFields() *UpdateDocumentsCall {
    op.QueryOpts.Set("apply_document_fields", "true")
    return op
}

// DeleteLock deletes a template lock.
// SDK Method Templates::deleteLock
// https://docs.docusign.com/esign/restapi/Templates/TemplateLocks/delete
func (s *Service) DeleteLock(templateID string, lockRequest *model.LockRequest) *DeleteLockCall {
    return &DeleteLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/lock",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: lockRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteLockCall implements DocuSign API SDK Templates::deleteLock
type DeleteLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// GetLock gets template lock information.
// SDK Method Templates::getLock
// https://docs.docusign.com/esign/restapi/Templates/TemplateLocks/get
func (s *Service) GetLock(templateID string) *GetLockCall {
    return &GetLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/lock",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetLockCall implements DocuSign API SDK Templates::getLock
type GetLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// CreateLock lock a template.
// SDK Method Templates::createLock
// https://docs.docusign.com/esign/restapi/Templates/TemplateLocks/create
func (s *Service) CreateLock(templateID string, lockRequest *model.LockRequest) *CreateLockCall {
    return &CreateLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates/{templateId}/lock",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: lockRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateLockCall implements DocuSign API SDK Templates::createLock
type CreateLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// UpdateLock updates a template lock.
// SDK Method Templates::updateLock
// https://docs.docusign.com/esign/restapi/Templates/TemplateLocks/update
func (s *Service) UpdateLock(templateID string, lockRequest *model.LockRequest) *UpdateLockCall {
    return &UpdateLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/lock",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: lockRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateLockCall implements DocuSign API SDK Templates::updateLock
type UpdateLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// GetNotificationSettings gets template notification information.
// SDK Method Templates::getNotificationSettings
// https://docs.docusign.com/esign/restapi/Templates/Templates/getNotificationSettings
func (s *Service) GetNotificationSettings(templateID string) *GetNotificationSettingsCall {
    return &GetNotificationSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/notification",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetNotificationSettingsCall implements DocuSign API SDK Templates::getNotificationSettings
type GetNotificationSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetNotificationSettingsCall) Do(ctx context.Context)  (*model.Notification, error) {
    var res *model.Notification
    return res, op.Call.Do(ctx, &res)
}

// UpdateNotificationSettings updates the notification  structure for an existing template.
// SDK Method Templates::updateNotificationSettings
// https://docs.docusign.com/esign/restapi/Templates/Templates/updateNotificationSettings
func (s *Service) UpdateNotificationSettings(templateID string, templateNotificationRequest *model.TemplateNotificationRequest) *UpdateNotificationSettingsCall {
    return &UpdateNotificationSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/notification",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateNotificationRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateNotificationSettingsCall implements DocuSign API SDK Templates::updateNotificationSettings
type UpdateNotificationSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateNotificationSettingsCall) Do(ctx context.Context)  (*model.Notification, error) {
    var res *model.Notification
    return res, op.Call.Do(ctx, &res)
}

// DeleteDocumentPage deletes a page from a document in an template.
// SDK Method Templates::deleteDocumentPage
// https://docs.docusign.com/esign/restapi/Templates/Templates/deleteDocumentPage
func (s *Service) DeleteDocumentPage(documentID string, pageNumber string, templateID string, pageRequest *model.PageRequest) *DeleteDocumentPageCall {
    return &DeleteDocumentPageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/documents/{documentId}/pages/{pageNumber}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{pageNumber}": pageNumber,
                "{templateId}": templateID,
            },
            Payload: pageRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteDocumentPageCall implements DocuSign API SDK Templates::deleteDocumentPage
type DeleteDocumentPageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteDocumentPageCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// GetDocumentPageImage gets a page image from a template for display.
// SDK Method Templates::getDocumentPageImage
// https://docs.docusign.com/esign/restapi/Templates/Templates/getDocumentPageImage
func (s *Service) GetDocumentPageImage(documentID string, pageNumber string, templateID string) *GetDocumentPageImageCall {
    return &GetDocumentPageImageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{pageNumber}": pageNumber,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetDocumentPageImageCall implements DocuSign API SDK Templates::getDocumentPageImage
type GetDocumentPageImageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetDocumentPageImageCall) Do(ctx context.Context)  (*esign.File, error) {
    var res *esign.File
    return res, op.Call.Do(ctx, &res)
}

// Dpi number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
func (op *GetDocumentPageImageCall) Dpi(val int) *GetDocumentPageImageCall {
    op.QueryOpts.Set("dpi", fmt.Sprintf("%d", val ))
    return op
}

// MaxHeight sets the maximum height (in pixels) of the returned image.
func (op *GetDocumentPageImageCall) MaxHeight(val int) *GetDocumentPageImageCall {
    op.QueryOpts.Set("max_height", fmt.Sprintf("%d", val ))
    return op
}

// MaxWidth sets the maximum width (in pixels) of the returned image.
func (op *GetDocumentPageImageCall) MaxWidth(val int) *GetDocumentPageImageCall {
    op.QueryOpts.Set("max_width", fmt.Sprintf("%d", val ))
    return op
}

// ShowChanges set the call query parameter show_changes
func (op *GetDocumentPageImageCall) ShowChanges() *GetDocumentPageImageCall {
    op.QueryOpts.Set("show_changes", "true")
    return op
}

// GetPages returns document page image(s) based on input.
// SDK Method Templates::getPages
// https://docs.docusign.com/esign/restapi/Templates/Templates/getPageImages
func (s *Service) GetPages(documentID string, templateID string) *GetPagesCall {
    return &GetPagesCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents/{documentId}/pages",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetPagesCall implements DocuSign API SDK Templates::getPages
type GetPagesCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetPagesCall) Do(ctx context.Context)  (*model.PageImages, error) {
    var res *model.PageImages
    return res, op.Call.Do(ctx, &res)
}

// Count is the maximum number of results to be returned by this request.
func (op *GetPagesCall) Count(val int) *GetPagesCall {
    op.QueryOpts.Set("count", fmt.Sprintf("%d", val ))
    return op
}

// Dpi number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
func (op *GetPagesCall) Dpi(val int) *GetPagesCall {
    op.QueryOpts.Set("dpi", fmt.Sprintf("%d", val ))
    return op
}

// MaxHeight sets the maximum height (in pixels) of the returned image.
func (op *GetPagesCall) MaxHeight(val int) *GetPagesCall {
    op.QueryOpts.Set("max_height", fmt.Sprintf("%d", val ))
    return op
}

// MaxWidth sets the maximum width (in pixels) of the returned image.
func (op *GetPagesCall) MaxWidth(val int) *GetPagesCall {
    op.QueryOpts.Set("max_width", fmt.Sprintf("%d", val ))
    return op
}

// Nocache set the call query parameter nocache
func (op *GetPagesCall) Nocache() *GetPagesCall {
    op.QueryOpts.Set("nocache", "true")
    return op
}

// ShowChanges set the call query parameter show_changes
func (op *GetPagesCall) ShowChanges() *GetPagesCall {
    op.QueryOpts.Set("show_changes", "true")
    return op
}

// StartPosition is the position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
func (op *GetPagesCall) StartPosition(val int) *GetPagesCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// RotateDocumentPage rotates page image from a template for display.
// SDK Method Templates::rotateDocumentPage
// https://docs.docusign.com/esign/restapi/Templates/Templates/rotateDocumentPage
func (s *Service) RotateDocumentPage(documentID string, pageNumber string, templateID string, pageRequest *model.PageRequest) *RotateDocumentPageCall {
    return &RotateDocumentPageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/documents/{documentId}/pages/{pageNumber}/page_image",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{pageNumber}": pageNumber,
                "{templateId}": templateID,
            },
            Payload: pageRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// RotateDocumentPageCall implements DocuSign API SDK Templates::rotateDocumentPage
type RotateDocumentPageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *RotateDocumentPageCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// DeleteBulkRecipients deletes the bulk recipient list on a template.
// SDK Method Templates::deleteBulkRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateBulkRecipients/delete
func (s *Service) DeleteBulkRecipients(recipientID string, templateID string) *DeleteBulkRecipientsCall {
    return &DeleteBulkRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/recipients/{recipientId}/bulk_recipients",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteBulkRecipientsCall implements DocuSign API SDK Templates::deleteBulkRecipients
type DeleteBulkRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteBulkRecipientsCall) Do(ctx context.Context)  (*model.BulkRecipientsUpdateResponse, error) {
    var res *model.BulkRecipientsUpdateResponse
    return res, op.Call.Do(ctx, &res)
}

// DeleteRecipient deletes the specified recipient file from a template.
// SDK Method Templates::deleteRecipient
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipients/delete
func (s *Service) DeleteRecipient(recipientID string, templateID string, templateRecipients *model.TemplateRecipients) *DeleteRecipientCall {
    return &DeleteRecipientCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/recipients/{recipientId}",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            Payload: templateRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteRecipientCall implements DocuSign API SDK Templates::deleteRecipient
type DeleteRecipientCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteRecipientCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// DeleteTabs deletes the tabs associated with a recipient in a template.
// SDK Method Templates::deleteTabs
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipientTabs/delete
func (s *Service) DeleteTabs(recipientID string, templateID string, templateTabs *model.TemplateTabs) *DeleteTabsCall {
    return &DeleteTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            Payload: templateTabs,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteTabsCall implements DocuSign API SDK Templates::deleteTabs
type DeleteTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// DeleteRecipients deletes recipients from a template.
// SDK Method Templates::deleteRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipients/deleteList
func (s *Service) DeleteRecipients(templateID string, templateRecipients *model.TemplateRecipients) *DeleteRecipientsCall {
    return &DeleteRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/recipients",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteRecipientsCall implements DocuSign API SDK Templates::deleteRecipients
type DeleteRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteRecipientsCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// ListBulkRecipients gets the bulk recipient file from a template.
// SDK Method Templates::listBulkRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateBulkRecipients/list
func (s *Service) ListBulkRecipients(recipientID string, templateID string) *ListBulkRecipientsCall {
    return &ListBulkRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/recipients/{recipientId}/bulk_recipients",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListBulkRecipientsCall implements DocuSign API SDK Templates::listBulkRecipients
type ListBulkRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListBulkRecipientsCall) Do(ctx context.Context)  (*model.BulkRecipientsResponse, error) {
    var res *model.BulkRecipientsResponse
    return res, op.Call.Do(ctx, &res)
}

// IncludeTabs when set to **true**, the tab information associated with the recipient is included in the response.
func (op *ListBulkRecipientsCall) IncludeTabs() *ListBulkRecipientsCall {
    op.QueryOpts.Set("include_tabs", "true")
    return op
}

// StartPosition reserved for DocuSign.
func (op *ListBulkRecipientsCall) StartPosition(val int) *ListBulkRecipientsCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// ListTabs gets the tabs information for a signer or sign-in-person recipient in a template.
// SDK Method Templates::listTabs
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipientTabs/list
func (s *Service) ListTabs(recipientID string, templateID string) *ListTabsCall {
    return &ListTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListTabsCall implements DocuSign API SDK Templates::listTabs
type ListTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// IncludeAnchorTabLocations when set to **true**, all tabs with anchor tab properties are included in the response.
func (op *ListTabsCall) IncludeAnchorTabLocations() *ListTabsCall {
    op.QueryOpts.Set("include_anchor_tab_locations", "true")
    return op
}

// IncludeMetadata reserved for DocuSign.
func (op *ListTabsCall) IncludeMetadata(val string) *ListTabsCall {
    op.QueryOpts.Set("include_metadata", val)
    return op
}

// ListRecipients gets recipient information from a template.
// SDK Method Templates::listRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipients/list
func (s *Service) ListRecipients(templateID string) *ListRecipientsCall {
    return &ListRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/recipients",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListRecipientsCall implements DocuSign API SDK Templates::listRecipients
type ListRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListRecipientsCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// IncludeAnchorTabLocations when set to **true** and `include_tabs` is set to **true**, all tabs with anchor tab properties are included in the response.
func (op *ListRecipientsCall) IncludeAnchorTabLocations() *ListRecipientsCall {
    op.QueryOpts.Set("include_anchor_tab_locations", "true")
    return op
}

// IncludeExtended when set to **true**, the extended properties are included in the response.
func (op *ListRecipientsCall) IncludeExtended() *ListRecipientsCall {
    op.QueryOpts.Set("include_extended", "true")
    return op
}

// IncludeTabs when set to **true**, the tab information associated with the recipient is included in the response.
func (op *ListRecipientsCall) IncludeTabs() *ListRecipientsCall {
    op.QueryOpts.Set("include_tabs", "true")
    return op
}

// CreateTabs adds tabs for a recipient.
// SDK Method Templates::createTabs
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipientTabs/create
func (s *Service) CreateTabs(recipientID string, templateID string, templateTabs *model.TemplateTabs) *CreateTabsCall {
    return &CreateTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates/{templateId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            Payload: templateTabs,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateTabsCall implements DocuSign API SDK Templates::createTabs
type CreateTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// CreateRecipients adds tabs for a recipient.
// SDK Method Templates::createRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipients/create
func (s *Service) CreateRecipients(templateID string, templateRecipients *model.TemplateRecipients) *CreateRecipientsCall {
    return &CreateRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates/{templateId}/recipients",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateRecipientsCall implements DocuSign API SDK Templates::createRecipients
type CreateRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateRecipientsCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// ResendEnvelope when set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
func (op *CreateRecipientsCall) ResendEnvelope() *CreateRecipientsCall {
    op.QueryOpts.Set("resend_envelope", "true")
    return op
}

// UpdateBulkRecipients adds or replaces the bulk recipients list in a template.
// SDK Method Templates::updateBulkRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateBulkRecipients/update
func (s *Service) UpdateBulkRecipients(recipientID string, templateID string, bulkRecipientsRequest *model.BulkRecipientsRequest) *UpdateBulkRecipientsCall {
    return &UpdateBulkRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/recipients/{recipientId}/bulk_recipients",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            Payload: bulkRecipientsRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateBulkRecipientsCall implements DocuSign API SDK Templates::updateBulkRecipients
type UpdateBulkRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateBulkRecipientsCall) Do(ctx context.Context)  (*model.BulkRecipientsSummaryResponse, error) {
    var res *model.BulkRecipientsSummaryResponse
    return res, op.Call.Do(ctx, &res)
}

// UpdateTabs updates the tabs for a recipient.
// SDK Method Templates::updateTabs
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipientTabs/update
func (s *Service) UpdateTabs(recipientID string, templateID string, templateTabs *model.TemplateTabs) *UpdateTabsCall {
    return &UpdateTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            Payload: templateTabs,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateTabsCall implements DocuSign API SDK Templates::updateTabs
type UpdateTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// UpdateRecipients updates recipients in a template.
// SDK Method Templates::updateRecipients
// https://docs.docusign.com/esign/restapi/Templates/TemplateRecipients/update
func (s *Service) UpdateRecipients(templateID string, templateRecipients *model.TemplateRecipients) *UpdateRecipientsCall {
    return &UpdateRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/recipients",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateRecipientsCall implements DocuSign API SDK Templates::updateRecipients
type UpdateRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateRecipientsCall) Do(ctx context.Context)  (*model.RecipientsUpdateSummary, error) {
    var res *model.RecipientsUpdateSummary
    return res, op.Call.Do(ctx, &res)
}

// ResendEnvelope when set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
func (op *UpdateRecipientsCall) ResendEnvelope() *UpdateRecipientsCall {
    op.QueryOpts.Set("resend_envelope", "true")
    return op
}

// GetDocumentTabs returns tabs on the document.
// SDK Method Templates::getDocumentTabs
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocumentTabs/get
func (s *Service) GetDocumentTabs(documentID string, templateID string) *GetDocumentTabsCall {
    return &GetDocumentTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents/{documentId}/tabs",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetDocumentTabsCall implements DocuSign API SDK Templates::getDocumentTabs
type GetDocumentTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetDocumentTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// PageNumbers set the call query parameter page_numbers
func (op *GetDocumentTabsCall) PageNumbers(val string) *GetDocumentTabsCall {
    op.QueryOpts.Set("page_numbers", val)
    return op
}

// GetPageTabs returns tabs on the specified page.
// SDK Method Templates::getPageTabs
// https://docs.docusign.com/esign/restapi/Templates/TemplateDocumentTabs/getByPage
func (s *Service) GetPageTabs(documentID string, pageNumber string, templateID string) *GetPageTabsCall {
    return &GetPageTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/documents/{documentId}/pages/{pageNumber}/tabs",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{pageNumber}": pageNumber,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetPageTabsCall implements DocuSign API SDK Templates::getPageTabs
type GetPageTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetPageTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// DeleteGroupShare removes a member group's sharing permissions for a template.
// SDK Method Templates::deleteGroupShare
// https://docs.docusign.com/esign/restapi/Templates/Templates/deleteGroupShare
func (s *Service) DeleteGroupShare(templateID string, templatePart string, groups *model.GroupInformation) *DeleteGroupShareCall {
    return &DeleteGroupShareCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "templates/{templateId}/{templatePart}",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
                "{templatePart}": templatePart,
            },
            Payload: groups,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteGroupShareCall implements DocuSign API SDK Templates::deleteGroupShare
type DeleteGroupShareCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteGroupShareCall) Do(ctx context.Context)  (*model.GroupInformation, error) {
    var res *model.GroupInformation
    return res, op.Call.Do(ctx, &res)
}

// Get gets a list of templates for a specified account.
// SDK Method Templates::get
// https://docs.docusign.com/esign/restapi/Templates/Templates/get
func (s *Service) Get(templateID string) *GetCall {
    return &GetCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetCall implements DocuSign API SDK Templates::get
type GetCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetCall) Do(ctx context.Context)  (*model.EnvelopeTemplate, error) {
    var res *model.EnvelopeTemplate
    return res, op.Call.Do(ctx, &res)
}

// Include is a comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
func (op *GetCall) Include(val ...string) *GetCall {
    op.QueryOpts.Set("include", strings.Join(val,","))
    return op
}

// ListTemplates gets the definition of a template.
// SDK Method Templates::ListTemplates
// https://docs.docusign.com/esign/restapi/Templates/Templates/list
func (s *Service) ListTemplates() *ListTemplatesCall {
    return &ListTemplatesCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates",
            QueryOpts: make(url.Values),
        },
    }
}

// ListTemplatesCall implements DocuSign API SDK Templates::ListTemplates
type ListTemplatesCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListTemplatesCall) Do(ctx context.Context)  (*model.EnvelopeTemplateResults, error) {
    var res *model.EnvelopeTemplateResults
    return res, op.Call.Do(ctx, &res)
}

// Count number of records to return in the cache.
func (op *ListTemplatesCall) Count(val int) *ListTemplatesCall {
    op.QueryOpts.Set("count", fmt.Sprintf("%d", val ))
    return op
}

// Folder is the query value can be a folder name or folder ID. The response will only return templates in the specified folder.
func (op *ListTemplatesCall) Folder(val string) *ListTemplatesCall {
    op.QueryOpts.Set("folder", val)
    return op
}

// FolderIds is a comma separated list of folder ID GUIDs.
func (op *ListTemplatesCall) FolderIds(val ...string) *ListTemplatesCall {
    op.QueryOpts.Set("folder_ids", strings.Join(val,","))
    return op
}

// FolderTypes set the call query parameter folder_types
func (op *ListTemplatesCall) FolderTypes(val string) *ListTemplatesCall {
    op.QueryOpts.Set("folder_types", val)
    return op
}

// FromDate start of the search date range. Only returns templates created on or after this date/time. If no value is specified, there is no limit on the earliest date created.
func (op *ListTemplatesCall) FromDate(val time.Time) *ListTemplatesCall {
    op.QueryOpts.Set("from_date", val.Format(time.RFC3339))
    return op
}

// Include is a comma-separated list
// of additional template attributes
// to include in the response.
// Valid values are:
// 
// * custom_fields
// * documents
// * folders
// * notifications
// * recipients
func (op *ListTemplatesCall) Include(val ...string) *ListTemplatesCall {
    op.QueryOpts.Set("include", strings.Join(val,","))
    return op
}

// Order sets the direction order used to sort the list. Valid values are: -asc = ascending sort order (a to z)  -desc = descending sort order (z to a)
func (op *ListTemplatesCall) Order(val string) *ListTemplatesCall {
    op.QueryOpts.Set("order", val)
    return op
}

// OrderBy sets the file attribute used to sort the list. Valid values are:  -name: template name  -modified: date/time template was last modified.  -used: date/time the template was last used.
func (op *ListTemplatesCall) OrderBy(val string) *ListTemplatesCall {
    op.QueryOpts.Set("order_by", val)
    return op
}

// SearchText is the search text used to search the names of templates.
func (op *ListTemplatesCall) SearchText(val string) *ListTemplatesCall {
    op.QueryOpts.Set("search_text", val)
    return op
}

// Shared set the call query parameter shared
func (op *ListTemplatesCall) Shared(val string) *ListTemplatesCall {
    op.QueryOpts.Set("shared", val)
    return op
}

// SharedByMe if true, the response only includes templates shared by the user. If false, the response only returns template not shared by the user. If not specified, the response is not affected.
func (op *ListTemplatesCall) SharedByMe(val string) *ListTemplatesCall {
    op.QueryOpts.Set("shared_by_me", val)
    return op
}

// StartPosition is the starting index for the first template shown in the response. This must be greater than or equal to 0 (zero).
func (op *ListTemplatesCall) StartPosition(val int) *ListTemplatesCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// ToDate end of the search date range. Only returns templates created up to this date/time. If no value is provided, this defaults to the current date.
func (op *ListTemplatesCall) ToDate(val time.Time) *ListTemplatesCall {
    op.QueryOpts.Set("to_date", val.Format(time.RFC3339))
    return op
}

// UsedFromDate start of the search date range. Only returns templates used or edited on or after this date/time. If no value is specified, there is no limit on the earliest date used.
func (op *ListTemplatesCall) UsedFromDate(val time.Time) *ListTemplatesCall {
    op.QueryOpts.Set("used_from_date", val.Format(time.RFC3339))
    return op
}

// UsedToDate end of the search date range. Only returns templates used or edited up to this date/time. If no value is provided, this defaults to the current date.
func (op *ListTemplatesCall) UsedToDate(val time.Time) *ListTemplatesCall {
    op.QueryOpts.Set("used_to_date", val.Format(time.RFC3339))
    return op
}

// UserFilter sets if the templates shown in the response Valid values are:  -owned_by_me: only shows templates the user owns.  -shared_with_me: only shows templates that are shared with the user.  -all: shows all templates owned or shared with the user.
func (op *ListTemplatesCall) UserFilter(val string) *ListTemplatesCall {
    op.QueryOpts.Set("user_filter", val)
    return op
}

// UserID set the call query parameter user_id
func (op *ListTemplatesCall) UserID(val string) *ListTemplatesCall {
    op.QueryOpts.Set("user_id", val)
    return op
}

// CreateTemplate creates an envelope from a template.
// SDK Method Templates::createTemplate
// https://docs.docusign.com/esign/restapi/Templates/Templates/create
func (s *Service) CreateTemplate(templates *model.EnvelopeTemplate) *CreateTemplateCall {
    return &CreateTemplateCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates",
            Payload: templates,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateTemplateCall implements DocuSign API SDK Templates::createTemplate
type CreateTemplateCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateTemplateCall) Do(ctx context.Context)  (*model.TemplateSummary, error) {
    var res *model.TemplateSummary
    return res, op.Call.Do(ctx, &res)
}

// Update updates an existing template.
// SDK Method Templates::update
// https://docs.docusign.com/esign/restapi/Templates/Templates/update
func (s *Service) Update(templateID string, templates *model.EnvelopeTemplate) *UpdateCall {
    return &UpdateCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templates,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateCall implements DocuSign API SDK Templates::update
type UpdateCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateCall) Do(ctx context.Context)  (*model.TemplateUpdateSummary, error) {
    var res *model.TemplateUpdateSummary
    return res, op.Call.Do(ctx, &res)
}

// UpdateGroupShare shares a template with a group
// SDK Method Templates::updateGroupShare
// https://docs.docusign.com/esign/restapi/Templates/Templates/updateGroupShare
func (s *Service) UpdateGroupShare(templateID string, templatePart string, groups *model.GroupInformation) *UpdateGroupShareCall {
    return &UpdateGroupShareCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/{templatePart}",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
                "{templatePart}": templatePart,
            },
            Payload: groups,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateGroupShareCall implements DocuSign API SDK Templates::updateGroupShare
type UpdateGroupShareCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateGroupShareCall) Do(ctx context.Context)  (*model.GroupInformation, error) {
    var res *model.GroupInformation
    return res, op.Call.Do(ctx, &res)
}

// CreateEditView provides a URL to start an edit view of the Template UI
// SDK Method Templates::createEditView
// https://docs.docusign.com/esign/restapi/Templates/TemplateViews/createEdit
func (s *Service) CreateEditView(templateID string, returnURLRequest *model.ReturnURLRequest) *CreateEditViewCall {
    return &CreateEditViewCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "templates/{templateId}/views/edit",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: returnURLRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateEditViewCall implements DocuSign API SDK Templates::createEditView
type CreateEditViewCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateEditViewCall) Do(ctx context.Context)  (*model.ViewURL, error) {
    var res *model.ViewURL
    return res, op.Call.Do(ctx, &res)
}

