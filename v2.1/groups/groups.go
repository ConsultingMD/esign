// Copyright 2019 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package groups implements the DocuSign SDK
// category Groups.
//
//
//
// Service Api documentation may be found at:
// https://developers.docusign.com/esign-rest-api/reference/Groups
// Usage example:
//
//   import (
//       "github.com/jfcote87/esign"
//       "github.com/jfcote87/esign/v2.1/groups"
//       "github.com/jfcote87/esign/v2.1/model"
//   )
//   ...
//   groupsService := groups.New(esignCredential)
package groups // import "github.com/jfcote87/esign/v2.1/groups"

import (
	"context"
	"net/url"
	"strings"

	"github.com/jfcote87/esign"
	"github.com/jfcote87/esign/v2.1/model"
)

// Service implements DocuSign Groups Category API operations
type Service struct {
	credential esign.Credential
}

// New initializes a groups service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// BrandsDelete deletes brand information from a group.
//
// https://developers.docusign.com/esign-rest-api/reference/groups/groupbrands/delete
//
// SDK Method Groups::deleteBrands
func (s *Service) BrandsDelete(groupID string, brandsRequest *model.BrandsRequest) *BrandsDeleteOp {
	return &BrandsDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"groups", groupID, "brands"}, "/"),
		Payload:    brandsRequest,
		QueryOpts:  make(url.Values),
		Version:    esign.VersionV21,
	}
}

// BrandsDeleteOp implements DocuSign API SDK Groups::deleteBrands
type BrandsDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsDeleteOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsGet gets the brand information for a group.
//
// https://developers.docusign.com/esign-rest-api/reference/groups/groupbrands/get
//
// SDK Method Groups::getBrands
func (s *Service) BrandsGet(groupID string) *BrandsGetOp {
	return &BrandsGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"groups", groupID, "brands"}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.VersionV21,
	}
}

// BrandsGetOp implements DocuSign API SDK Groups::getBrands
type BrandsGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsGetOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BrandsUpdate adds an existing brand to a group.
//
// https://developers.docusign.com/esign-rest-api/reference/groups/groupbrands/update
//
// SDK Method Groups::updateBrands
func (s *Service) BrandsUpdate(groupID string, brandsRequest *model.BrandsRequest) *BrandsUpdateOp {
	return &BrandsUpdateOp{
		Credential: s.credential,
		Method:     "PUT",
		Path:       strings.Join([]string{"groups", groupID, "brands"}, "/"),
		Payload:    brandsRequest,
		QueryOpts:  make(url.Values),
		Version:    esign.VersionV21,
	}
}

// BrandsUpdateOp implements DocuSign API SDK Groups::updateBrands
type BrandsUpdateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BrandsUpdateOp) Do(ctx context.Context) (*model.BrandsResponse, error) {
	var res *model.BrandsResponse
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}
