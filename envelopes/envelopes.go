// Copyright 2017 James Cote and Liberty Fund, Inc.
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package envelopes implements the DocuSign SDK
// category Envelopes.
// 
// The DocuSign API Envelope category includes the resources and methods for sending and managing envelopes and envelope data.
// 
// Envelopes are the key objects within the DocuSign eSignature system. As a result, they are complex data structures with few required fields. See the [API Recipes](https://www.docusign.com/developer-center/recipes) for use case examples and their solutions.
// 
// To create and send envelopes, see the [Envelopes resource](Envelopes).
// Api documentation may be found at:
// https://docs.docusign.com/esign/restapi/Envelopes
package envelopes

import (
    "fmt"
    "net/url"
    "strings"
    "time"
    
    "golang.org/x/net/context"
    
    "github.com/jfcote87/esign"
    "github.com/jfcote87/esign/model"
)

// Service generates DocuSign Envelopes Category API calls
type Service struct {
    credential esign.Credential 
}

// New initializes a envelopes service using cred to authorize calls.
func New(cred esign.Credential) *Service {
    return &Service{credential: cred}
}

// DeleteAttachments delete one or more attachments from a DRAFT envelope.
// SDK Method Envelopes::deleteAttachments
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeAttachments/delete
func (s *Service) DeleteAttachments(envelopeID string, envelopeAttachmentsRequest *model.EnvelopeAttachmentsRequest) *DeleteAttachmentsCall {
    return &DeleteAttachmentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/attachments",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeAttachmentsRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteAttachmentsCall implements DocuSign API SDK Envelopes::deleteAttachments
type DeleteAttachmentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteAttachmentsCall) Do(ctx context.Context)  (*model.EnvelopeAttachmentsResult, error) {
    var res *model.EnvelopeAttachmentsResult
    return res, op.Call.Do(ctx, &res)
}

// GetAttachment retrieves an attachment from the envelope.
// SDK Method Envelopes::getAttachment
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeAttachments/get
func (s *Service) GetAttachment(attachmentID string, envelopeID string) *GetAttachmentCall {
    return &GetAttachmentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/attachments/{attachmentId}",
            PathParameters: map[string]string{ 
                "{attachmentId}": attachmentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetAttachmentCall implements DocuSign API SDK Envelopes::getAttachment
type GetAttachmentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetAttachmentCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// GetAttachments returns a list of attachments associated with the specified envelope
// SDK Method Envelopes::getAttachments
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeAttachments/list
func (s *Service) GetAttachments(envelopeID string) *GetAttachmentsCall {
    return &GetAttachmentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/attachments",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetAttachmentsCall implements DocuSign API SDK Envelopes::getAttachments
type GetAttachmentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetAttachmentsCall) Do(ctx context.Context)  (*model.EnvelopeAttachmentsResult, error) {
    var res *model.EnvelopeAttachmentsResult
    return res, op.Call.Do(ctx, &res)
}

// PutAttachment add an attachment to a DRAFT or IN-PROCESS envelope.
// SDK Method Envelopes::putAttachment
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeAttachments/update
func (s *Service) PutAttachment(attachmentID string, envelopeID string, attachment *model.Attachment) *PutAttachmentCall {
    return &PutAttachmentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/attachments/{attachmentId}",
            PathParameters: map[string]string{ 
                "{attachmentId}": attachmentID,
                "{envelopeId}": envelopeID,
            },
            Payload: attachment,
            QueryOpts: make(url.Values),
        },
    }
}

// PutAttachmentCall implements DocuSign API SDK Envelopes::putAttachment
type PutAttachmentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *PutAttachmentCall) Do(ctx context.Context)  (*model.EnvelopeAttachmentsResult, error) {
    var res *model.EnvelopeAttachmentsResult
    return res, op.Call.Do(ctx, &res)
}

// PutAttachments add one or more attachments to a DRAFT or IN-PROCESS envelope.
// SDK Method Envelopes::putAttachments
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeAttachments/create
func (s *Service) PutAttachments(envelopeID string, envelopeAttachmentsRequest *model.EnvelopeAttachmentsRequest) *PutAttachmentsCall {
    return &PutAttachmentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/attachments",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeAttachmentsRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// PutAttachmentsCall implements DocuSign API SDK Envelopes::putAttachments
type PutAttachmentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *PutAttachmentsCall) Do(ctx context.Context)  (*model.EnvelopeAttachmentsResult, error) {
    var res *model.EnvelopeAttachmentsResult
    return res, op.Call.Do(ctx, &res)
}

// ListAuditEvents gets the envelope audit events for an envelope.
// SDK Method Envelopes::listAuditEvents
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/listAuditEvents
func (s *Service) ListAuditEvents(envelopeID string) *ListAuditEventsCall {
    return &ListAuditEventsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/audit_events",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListAuditEventsCall implements DocuSign API SDK Envelopes::listAuditEvents
type ListAuditEventsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListAuditEventsCall) Do(ctx context.Context)  (*model.EnvelopeAuditEventResponse, error) {
    var res *model.EnvelopeAuditEventResponse
    return res, op.Call.Do(ctx, &res)
}

// DeleteChunkedUpload delete an existing ChunkedUpload.
// SDK Method Envelopes::deleteChunkedUpload
// https://docs.docusign.com/esign/restapi/Envelopes/ChunkedUploads/delete
func (s *Service) DeleteChunkedUpload(chunkedUploadID string) *DeleteChunkedUploadCall {
    return &DeleteChunkedUploadCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "chunked_uploads/{chunkedUploadId}",
            PathParameters: map[string]string{ 
                "{chunkedUploadId}": chunkedUploadID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteChunkedUploadCall implements DocuSign API SDK Envelopes::deleteChunkedUpload
type DeleteChunkedUploadCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteChunkedUploadCall) Do(ctx context.Context)  (*model.ChunkedUploadResponse, error) {
    var res *model.ChunkedUploadResponse
    return res, op.Call.Do(ctx, &res)
}

// GetChunkedUpload retrieves the current metadata of a ChunkedUpload.
// SDK Method Envelopes::getChunkedUpload
// https://docs.docusign.com/esign/restapi/Envelopes/ChunkedUploads/get
func (s *Service) GetChunkedUpload(chunkedUploadID string) *GetChunkedUploadCall {
    return &GetChunkedUploadCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "chunked_uploads/{chunkedUploadId}",
            PathParameters: map[string]string{ 
                "{chunkedUploadId}": chunkedUploadID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetChunkedUploadCall implements DocuSign API SDK Envelopes::getChunkedUpload
type GetChunkedUploadCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetChunkedUploadCall) Do(ctx context.Context)  (*model.ChunkedUploadResponse, error) {
    var res *model.ChunkedUploadResponse
    return res, op.Call.Do(ctx, &res)
}

// Include is a comma-separated list of additional template attributes to include in the response. Valid values are: recipients, folders, documents, custom_fields, and notifications.
func (op *GetChunkedUploadCall) Include(val ...string) *GetChunkedUploadCall {
    op.QueryOpts.Set("include", strings.Join(val,","))
    return op
}

// CreateChunkedUpload initiate a new ChunkedUpload.
// SDK Method Envelopes::createChunkedUpload
// https://docs.docusign.com/esign/restapi/Envelopes/ChunkedUploads/create
func (s *Service) CreateChunkedUpload(chunkedUploadRequest *model.ChunkedUploadRequest) *CreateChunkedUploadCall {
    return &CreateChunkedUploadCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "chunked_uploads",
            Payload: chunkedUploadRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateChunkedUploadCall implements DocuSign API SDK Envelopes::createChunkedUpload
type CreateChunkedUploadCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateChunkedUploadCall) Do(ctx context.Context)  (*model.ChunkedUploadResponse, error) {
    var res *model.ChunkedUploadResponse
    return res, op.Call.Do(ctx, &res)
}

// UpdateChunkedUploadPart add a chunk, a chunk 'part', to an existing ChunkedUpload.
// SDK Method Envelopes::updateChunkedUploadPart
// https://docs.docusign.com/esign/restapi/Envelopes/ChunkedUploads/update
func (s *Service) UpdateChunkedUploadPart(chunkedUploadID string, chunkedUploadPartSeq string, chunkedUploadRequest *model.ChunkedUploadRequest) *UpdateChunkedUploadPartCall {
    return &UpdateChunkedUploadPartCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "chunked_uploads/{chunkedUploadId}/{chunkedUploadPartSeq}",
            PathParameters: map[string]string{ 
                "{chunkedUploadId}": chunkedUploadID,
                "{chunkedUploadPartSeq}": chunkedUploadPartSeq,
            },
            Payload: chunkedUploadRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateChunkedUploadPartCall implements DocuSign API SDK Envelopes::updateChunkedUploadPart
type UpdateChunkedUploadPartCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateChunkedUploadPartCall) Do(ctx context.Context)  (*model.ChunkedUploadResponse, error) {
    var res *model.ChunkedUploadResponse
    return res, op.Call.Do(ctx, &res)
}

// UpdateChunkedUpload integrity-Check and Commit a ChunkedUpload, readying it for use elsewhere.
// SDK Method Envelopes::updateChunkedUpload
// https://docs.docusign.com/esign/restapi/Envelopes/ChunkedUploads/commit
func (s *Service) UpdateChunkedUpload(chunkedUploadID string) *UpdateChunkedUploadCall {
    return &UpdateChunkedUploadCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "chunked_uploads/{chunkedUploadId}",
            PathParameters: map[string]string{ 
                "{chunkedUploadId}": chunkedUploadID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateChunkedUploadCall implements DocuSign API SDK Envelopes::updateChunkedUpload
type UpdateChunkedUploadCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateChunkedUploadCall) Do(ctx context.Context)  (*model.ChunkedUploadResponse, error) {
    var res *model.ChunkedUploadResponse
    return res, op.Call.Do(ctx, &res)
}

// Action set the call query parameter action
func (op *UpdateChunkedUploadCall) Action(val string) *UpdateChunkedUploadCall {
    op.QueryOpts.Set("action", val)
    return op
}

// GetConsumerDisclosureDefault gets the Electronic Record and Signature Disclosure associated with the account.
// SDK Method Envelopes::getConsumerDisclosureDefault
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeConsumerDisclosures/getDefault
func (s *Service) GetConsumerDisclosureDefault(envelopeID string, recipientID string) *GetConsumerDisclosureDefaultCall {
    return &GetConsumerDisclosureDefaultCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetConsumerDisclosureDefaultCall implements DocuSign API SDK Envelopes::getConsumerDisclosureDefault
type GetConsumerDisclosureDefaultCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetConsumerDisclosureDefaultCall) Do(ctx context.Context)  (*model.ConsumerDisclosure, error) {
    var res *model.ConsumerDisclosure
    return res, op.Call.Do(ctx, &res)
}

// LangCode set the call query parameter langCode
func (op *GetConsumerDisclosureDefaultCall) LangCode(val string) *GetConsumerDisclosureDefaultCall {
    op.QueryOpts.Set("langCode", val)
    return op
}

// GetConsumerDisclosure reserved: Gets the Electronic Record and Signature Disclosure associated with the account.
// SDK Method Envelopes::getConsumerDisclosure
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeConsumerDisclosures/get
func (s *Service) GetConsumerDisclosure(envelopeID string, langCode string, recipientID string) *GetConsumerDisclosureCall {
    return &GetConsumerDisclosureCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/consumer_disclosure/{langCode}",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{langCode}": langCode,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetConsumerDisclosureCall implements DocuSign API SDK Envelopes::getConsumerDisclosure
type GetConsumerDisclosureCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetConsumerDisclosureCall) Do(ctx context.Context)  (*model.ConsumerDisclosure, error) {
    var res *model.ConsumerDisclosure
    return res, op.Call.Do(ctx, &res)
}

// LangCode set the call query parameter langCode
func (op *GetConsumerDisclosureCall) LangCode(val string) *GetConsumerDisclosureCall {
    op.QueryOpts.Set("langCode", val)
    return op
}

// DeleteCustomFields deletes envelope custom fields for draft and in-process envelopes.
// SDK Method Envelopes::deleteCustomFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeCustomFields/delete
func (s *Service) DeleteCustomFields(envelopeID string, envelopeCustomFields *model.CustomFields) *DeleteCustomFieldsCall {
    return &DeleteCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/custom_fields",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeCustomFields,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteCustomFieldsCall implements DocuSign API SDK Envelopes::deleteCustomFields
type DeleteCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// ListCustomFields gets the custom field information for the specified envelope.
// SDK Method Envelopes::listCustomFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeCustomFields/list
func (s *Service) ListCustomFields(envelopeID string) *ListCustomFieldsCall {
    return &ListCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/custom_fields",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListCustomFieldsCall implements DocuSign API SDK Envelopes::listCustomFields
type ListCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFieldsEnvelope, error) {
    var res *model.CustomFieldsEnvelope
    return res, op.Call.Do(ctx, &res)
}

// CreateCustomFields updates envelope custom fields for an envelope.
// SDK Method Envelopes::createCustomFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeCustomFields/create
func (s *Service) CreateCustomFields(envelopeID string, envelopeCustomFields *model.CustomFields) *CreateCustomFieldsCall {
    return &CreateCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/custom_fields",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeCustomFields,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateCustomFieldsCall implements DocuSign API SDK Envelopes::createCustomFields
type CreateCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// UpdateCustomFields updates envelope custom fields in an envelope.
// SDK Method Envelopes::updateCustomFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeCustomFields/update
func (s *Service) UpdateCustomFields(envelopeID string, envelopeCustomFields *model.CustomFields) *UpdateCustomFieldsCall {
    return &UpdateCustomFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/custom_fields",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeCustomFields,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateCustomFieldsCall implements DocuSign API SDK Envelopes::updateCustomFields
type UpdateCustomFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateCustomFieldsCall) Do(ctx context.Context)  (*model.CustomFields, error) {
    var res *model.CustomFields
    return res, op.Call.Do(ctx, &res)
}

// DeleteDocumentFields deletes custom document fields from an existing envelope document.
// SDK Method Envelopes::deleteDocumentFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentFields/delete
func (s *Service) DeleteDocumentFields(documentID string, envelopeID string, envelopeDocumentFields *model.DocumentFieldsInformation) *DeleteDocumentFieldsCall {
    return &DeleteDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeDocumentFields,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteDocumentFieldsCall implements DocuSign API SDK Envelopes::deleteDocumentFields
type DeleteDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// ListDocumentFields gets the custom document fields from an  existing envelope document.
// SDK Method Envelopes::listDocumentFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentFields/list
func (s *Service) ListDocumentFields(documentID string, envelopeID string) *ListDocumentFieldsCall {
    return &ListDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListDocumentFieldsCall implements DocuSign API SDK Envelopes::listDocumentFields
type ListDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// CreateDocumentFields creates custom document fields in an existing envelope document.
// SDK Method Envelopes::createDocumentFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentFields/create
func (s *Service) CreateDocumentFields(documentID string, envelopeID string, envelopeDocumentFields *model.DocumentFieldsInformation) *CreateDocumentFieldsCall {
    return &CreateDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeDocumentFields,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateDocumentFieldsCall implements DocuSign API SDK Envelopes::createDocumentFields
type CreateDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// UpdateDocumentFields updates existing custom document fields in an existing envelope document.
// SDK Method Envelopes::updateDocumentFields
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentFields/update
func (s *Service) UpdateDocumentFields(documentID string, envelopeID string, envelopeDocumentFields *model.DocumentFieldsInformation) *UpdateDocumentFieldsCall {
    return &UpdateDocumentFieldsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/documents/{documentId}/fields",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeDocumentFields,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateDocumentFieldsCall implements DocuSign API SDK Envelopes::updateDocumentFields
type UpdateDocumentFieldsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateDocumentFieldsCall) Do(ctx context.Context)  (*model.DocumentFieldsInformation, error) {
    var res *model.DocumentFieldsInformation
    return res, op.Call.Do(ctx, &res)
}

// DeleteDocuments deletes documents from a draft envelope.
// SDK Method Envelopes::deleteDocuments
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocuments/delete
func (s *Service) DeleteDocuments(envelopeID string, envelopeDefinition *model.EnvelopeDefinition) *DeleteDocumentsCall {
    return &DeleteDocumentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/documents",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeDefinition,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteDocumentsCall implements DocuSign API SDK Envelopes::deleteDocuments
type DeleteDocumentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteDocumentsCall) Do(ctx context.Context)  (*model.EnvelopeDocumentsResult, error) {
    var res *model.EnvelopeDocumentsResult
    return res, op.Call.Do(ctx, &res)
}

// GetDocument gets a document from an envelope.
// SDK Method Envelopes::getDocument
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocuments/get
func (s *Service) GetDocument(documentID string, envelopeID string) *GetDocumentCall {
    return &GetDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetDocumentCall implements DocuSign API SDK Envelopes::getDocument
type GetDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetDocumentCall) Do(ctx context.Context)  (*esign.File, error) {
    var res *esign.File
    return res, op.Call.Do(ctx, &res)
}

// Certificate when set to **false**, the envelope signing certificate is removed from the download.
func (op *GetDocumentCall) Certificate(val string) *GetDocumentCall {
    op.QueryOpts.Set("certificate", val)
    return op
}

// Encoding set the call query parameter encoding
func (op *GetDocumentCall) Encoding(val string) *GetDocumentCall {
    op.QueryOpts.Set("encoding", val)
    return op
}

// Encrypt when set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. The documents can be decrypted with the KeyManager Decrypt Document API.
func (op *GetDocumentCall) Encrypt() *GetDocumentCall {
    op.QueryOpts.Set("encrypt", "true")
    return op
}

// Language specifies the language for the Certificate of Completion in the response. The supported languages, with the language value shown in parenthesis, are: Chinese Simplified (zh_CN), , Chinese Traditional (zh_TW), Dutch (nl), English US (en), French (fr), German (de), Italian (it), Japanese (ja), Korean (ko), Portuguese (pt), Portuguese (Brazil) (pt_BR), Russian (ru), Spanish (es).
func (op *GetDocumentCall) Language(val string) *GetDocumentCall {
    op.QueryOpts.Set("language", val)
    return op
}

// RecipientID set the call query parameter recipient_id
func (op *GetDocumentCall) RecipientID(val string) *GetDocumentCall {
    op.QueryOpts.Set("recipient_id", val)
    return op
}

// ShowChanges when set to **true**, any changed fields for the returned PDF are highlighted in yellow and optional signatures or initials outlined in red.
func (op *GetDocumentCall) ShowChanges() *GetDocumentCall {
    op.QueryOpts.Set("show_changes", "true")
    return op
}

// Watermark when set to **true**, the account has the watermark feature enabled, and the envelope is not complete, the watermark for the account is added to the PDF documents. This option can remove the watermark.
func (op *GetDocumentCall) Watermark() *GetDocumentCall {
    op.QueryOpts.Set("watermark", "true")
    return op
}

// ListDocuments gets a list of envelope documents.
// SDK Method Envelopes::listDocuments
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocuments/list
func (s *Service) ListDocuments(envelopeID string) *ListDocumentsCall {
    return &ListDocumentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListDocumentsCall implements DocuSign API SDK Envelopes::listDocuments
type ListDocumentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListDocumentsCall) Do(ctx context.Context)  (*model.EnvelopeDocumentsResult, error) {
    var res *model.EnvelopeDocumentsResult
    return res, op.Call.Do(ctx, &res)
}

// IncludeMetadata reserved for DocuSign.
func (op *ListDocumentsCall) IncludeMetadata(val string) *ListDocumentsCall {
    op.QueryOpts.Set("include_metadata", val)
    return op
}

// UpdateDocument adds a document to an existing draft envelope.
// SDK Method Envelopes::updateDocument
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocuments/update
func (s *Service) UpdateDocument(documentID string, envelopeID string) *UpdateDocumentCall {
    return &UpdateDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/documents/{documentId}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateDocumentCall implements DocuSign API SDK Envelopes::updateDocument
type UpdateDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateDocumentCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// ApplyDocumentFields when **true**, document fields
// can be added or modified
// while adding or modifying envelope documents.
func (op *UpdateDocumentCall) ApplyDocumentFields() *UpdateDocumentCall {
    op.QueryOpts.Set("apply_document_fields", "true")
    return op
}

// UpdateDocuments adds one or more documents to an existing envelope document.
// SDK Method Envelopes::updateDocuments
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocuments/updateList
func (s *Service) UpdateDocuments(envelopeID string, envelopeDefinition *model.EnvelopeDefinition) *UpdateDocumentsCall {
    return &UpdateDocumentsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/documents",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeDefinition,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateDocumentsCall implements DocuSign API SDK Envelopes::updateDocuments
type UpdateDocumentsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateDocumentsCall) Do(ctx context.Context)  (*model.EnvelopeDocumentsResult, error) {
    var res *model.EnvelopeDocumentsResult
    return res, op.Call.Do(ctx, &res)
}

// ApplyDocumentFields when **true**, document fields
// can be added or modified
// while adding or modifying envelope documents.
func (op *UpdateDocumentsCall) ApplyDocumentFields() *UpdateDocumentsCall {
    op.QueryOpts.Set("apply_document_fields", "true")
    return op
}

// DeleteEmailSettings deletes the email setting overrides for an envelope.
// SDK Method Envelopes::deleteEmailSettings
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeEmailSettings/delete
func (s *Service) DeleteEmailSettings(envelopeID string) *DeleteEmailSettingsCall {
    return &DeleteEmailSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/email_settings",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteEmailSettingsCall implements DocuSign API SDK Envelopes::deleteEmailSettings
type DeleteEmailSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteEmailSettingsCall) Do(ctx context.Context)  (*model.EmailSettings, error) {
    var res *model.EmailSettings
    return res, op.Call.Do(ctx, &res)
}

// GetEmailSettings gets the email setting overrides for an envelope.
// SDK Method Envelopes::getEmailSettings
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeEmailSettings/get
func (s *Service) GetEmailSettings(envelopeID string) *GetEmailSettingsCall {
    return &GetEmailSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/email_settings",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetEmailSettingsCall implements DocuSign API SDK Envelopes::getEmailSettings
type GetEmailSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetEmailSettingsCall) Do(ctx context.Context)  (*model.EmailSettings, error) {
    var res *model.EmailSettings
    return res, op.Call.Do(ctx, &res)
}

// CreateEmailSettings adds email setting overrides to an envelope.
// SDK Method Envelopes::createEmailSettings
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeEmailSettings/create
func (s *Service) CreateEmailSettings(envelopeID string, envelopeEmailSettings *model.EmailSettings) *CreateEmailSettingsCall {
    return &CreateEmailSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/email_settings",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeEmailSettings,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateEmailSettingsCall implements DocuSign API SDK Envelopes::createEmailSettings
type CreateEmailSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateEmailSettingsCall) Do(ctx context.Context)  (*model.EmailSettings, error) {
    var res *model.EmailSettings
    return res, op.Call.Do(ctx, &res)
}

// UpdateEmailSettings updates the email setting overrides for an envelope.
// SDK Method Envelopes::updateEmailSettings
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeEmailSettings/update
func (s *Service) UpdateEmailSettings(envelopeID string, envelopeEmailSettings *model.EmailSettings) *UpdateEmailSettingsCall {
    return &UpdateEmailSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/email_settings",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeEmailSettings,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateEmailSettingsCall implements DocuSign API SDK Envelopes::updateEmailSettings
type UpdateEmailSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateEmailSettingsCall) Do(ctx context.Context)  (*model.EmailSettings, error) {
    var res *model.EmailSettings
    return res, op.Call.Do(ctx, &res)
}

// GetEnvelope gets the status of a envelope.
// SDK Method Envelopes::getEnvelope
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/get
func (s *Service) GetEnvelope(envelopeID string) *GetEnvelopeCall {
    return &GetEnvelopeCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetEnvelopeCall implements DocuSign API SDK Envelopes::getEnvelope
type GetEnvelopeCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetEnvelopeCall) Do(ctx context.Context)  (*model.Envelope, error) {
    var res *model.Envelope
    return res, op.Call.Do(ctx, &res)
}

// AdvancedUpdate when true, envelope information can be added or modified.
func (op *GetEnvelopeCall) AdvancedUpdate() *GetEnvelopeCall {
    op.QueryOpts.Set("advanced_update", "true")
    return op
}

// Include reserved for DocuSign.
func (op *GetEnvelopeCall) Include(val string) *GetEnvelopeCall {
    op.QueryOpts.Set("include", val)
    return op
}

// ListStatusChanges gets status changes for one or more envelopes.
// SDK Method Envelopes::listStatusChanges
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/listStatusChanges
func (s *Service) ListStatusChanges() *ListStatusChangesCall {
    return &ListStatusChangesCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes",
            QueryOpts: make(url.Values),
        },
    }
}

// ListStatusChangesCall implements DocuSign API SDK Envelopes::listStatusChanges
type ListStatusChangesCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListStatusChangesCall) Do(ctx context.Context)  (*model.EnvelopesInformation, error) {
    var res *model.EnvelopesInformation
    return res, op.Call.Do(ctx, &res)
}

// AcStatus specifies the Authoritative Copy Status for the envelopes. The possible values are: Unknown, Original, Transferred, AuthoritativeCopy, AuthoritativeCopyExportPending, AuthoritativeCopyExported, DepositPending, Deposited, DepositedEO, or DepositFailed.
func (op *ListStatusChangesCall) AcStatus(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("ac_status", val)
    return op
}

// Block reserved for DocuSign.
func (op *ListStatusChangesCall) Block(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("block", val)
    return op
}

// Count optional. Number of items to return.
func (op *ListStatusChangesCall) Count(val int) *ListStatusChangesCall {
    op.QueryOpts.Set("count", fmt.Sprintf("%d", val ))
    return op
}

// CustomField optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: `custom_envelope_field_name=desired_value`
// 
// The value portion of the query can use partial strings by adding '%' (percent sign) around the custom field query value. 
// 
// Example 1: If you have an envelope custom field named "Region" and you want to search for all envelopes where the value is "West" you would use set this parameter to `Region=West`. 
// 
// Example 2: To search for envelopes where the `ApplicationID` custom field has the value or partial value of "DocuSign" in the field, set this parameter to `ApplicationId=%DocuSign%` This would match envelopes where the custom field's value is "DocuSign for Salesforce" or "DocuSign envelope".
func (op *ListStatusChangesCall) CustomField(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("custom_field", val)
    return op
}

// Email limit results to envelopes
// sent by the account user
// with this email address.
// 
// `user_name` must be given as well,
// and both `email` and `user_name`
// must refer to an existing account user.
func (op *ListStatusChangesCall) Email(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("email", val)
    return op
}

// EnvelopeIds comma separated list of `envelopeId` values.
func (op *ListStatusChangesCall) EnvelopeIds(val ...string) *ListStatusChangesCall {
    op.QueryOpts.Set("envelope_ids", strings.Join(val,","))
    return op
}

// Exclude reserved for DocuSign.
func (op *ListStatusChangesCall) Exclude(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("exclude", val)
    return op
}

// FolderIds reserved for DocuSign.
func (op *ListStatusChangesCall) FolderIds(val ...string) *ListStatusChangesCall {
    op.QueryOpts.Set("folder_ids", strings.Join(val,","))
    return op
}

// FolderTypes reserved for DocuSign.
func (op *ListStatusChangesCall) FolderTypes(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("folder_types", val)
    return op
}

// FromDate specifies the date and time
// to start looking for status changes.
// This parameter is required
// unless `envelopeIds` or `transactionIds`
// are set.
func (op *ListStatusChangesCall) FromDate(val time.Time) *ListStatusChangesCall {
    op.QueryOpts.Set("from_date", val.Format(time.RFC3339))
    return op
}

// FromToStatus is the status value checked for in the `from_date` to `to_date` time period. 
// 
// Possible values are: Voided, Changed, Created, Deleted, Sent, Delivered, Signed, Completed, Declined, TimedOut and Processing.
// 
// If `Changed` is specified, then envelopes that changed status during the period will be returned. 
// 
// For example, if `Created` is specified, then envelopes created during the period are found. 
// 
// The default is `Changed`.
func (op *ListStatusChangesCall) FromToStatus(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("from_to_status", val)
    return op
}

// Include reserved for DocuSign.
func (op *ListStatusChangesCall) Include(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("include", val)
    return op
}

// IncludePurgeInformation set the call query parameter include_purge_information
func (op *ListStatusChangesCall) IncludePurgeInformation(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("include_purge_information", val)
    return op
}

// IntersectingFolderIds reserved for DocuSign.
func (op *ListStatusChangesCall) IntersectingFolderIds(val ...string) *ListStatusChangesCall {
    op.QueryOpts.Set("intersecting_folder_ids", strings.Join(val,","))
    return op
}

// Order reserved for DocuSign.
func (op *ListStatusChangesCall) Order(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("order", val)
    return op
}

// OrderBy reserved for DocuSign.
func (op *ListStatusChangesCall) OrderBy(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("order_by", val)
    return op
}

// Powerformids reserved for DocuSign.
func (op *ListStatusChangesCall) Powerformids(val ...string) *ListStatusChangesCall {
    op.QueryOpts.Set("powerformids", strings.Join(val,","))
    return op
}

// SearchText reserved for DocuSign.
func (op *ListStatusChangesCall) SearchText(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("search_text", val)
    return op
}

// StartPosition reserved for DocuSign.
func (op *ListStatusChangesCall) StartPosition(val int) *ListStatusChangesCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// Status is a comma-separated list of current envelope statuses to included in the response. Possible values are:
// 
// * completed
// * created
// * declined
// * deleted
// * delivered
// * processing
// * sent
// * signed
// * timedout
// * voided
// 
// The `any` value is equivalent to any status.
func (op *ListStatusChangesCall) Status(val ...string) *ListStatusChangesCall {
    op.QueryOpts.Set("status", strings.Join(val,","))
    return op
}

// ToDate specifies the date and time
// to stop looking for status changes.
// The default is the current date and time.
func (op *ListStatusChangesCall) ToDate(val time.Time) *ListStatusChangesCall {
    op.QueryOpts.Set("to_date", val.Format(time.RFC3339))
    return op
}

// TransactionIds is a comma-separated list of envelope transaction IDs.
// Transaction IDs are only valid for seven days.
func (op *ListStatusChangesCall) TransactionIds(val ...string) *ListStatusChangesCall {
    op.QueryOpts.Set("transaction_ids", strings.Join(val,","))
    return op
}

// UserFilter reserved for DocuSign.
func (op *ListStatusChangesCall) UserFilter(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("user_filter", val)
    return op
}

// UserID reserved for DocuSign.
func (op *ListStatusChangesCall) UserID(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("user_id", val)
    return op
}

// UserName limit results to envelopes
// sent by the account user
// with this user name.
// 
// `email` must be given as well,
// and both `email` and `user_name`
// must refer to an existing account user.
func (op *ListStatusChangesCall) UserName(val string) *ListStatusChangesCall {
    op.QueryOpts.Set("user_name", val)
    return op
}

// CreateEnvelope creates an envelope.
// SDK Method Envelopes::createEnvelope
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/create
func (s *Service) CreateEnvelope(envelopeDefinition *model.EnvelopeDefinition) *CreateEnvelopeCall {
    return &CreateEnvelopeCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes",
            Payload: envelopeDefinition,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateEnvelopeCall implements DocuSign API SDK Envelopes::createEnvelope
type CreateEnvelopeCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateEnvelopeCall) Do(ctx context.Context)  (*model.EnvelopeSummary, error) {
    var res *model.EnvelopeSummary
    return res, op.Call.Do(ctx, &res)
}

// CdseMode reserved for DocuSign.
func (op *CreateEnvelopeCall) CdseMode(val string) *CreateEnvelopeCall {
    op.QueryOpts.Set("cdse_mode", val)
    return op
}

// CompletedDocumentsOnly reserved for DocuSign.
func (op *CreateEnvelopeCall) CompletedDocumentsOnly(val string) *CreateEnvelopeCall {
    op.QueryOpts.Set("completed_documents_only", val)
    return op
}

// MergeRolesOnDraft when set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)
// 
// ###### Note: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates.
func (op *CreateEnvelopeCall) MergeRolesOnDraft() *CreateEnvelopeCall {
    op.QueryOpts.Set("merge_roles_on_draft", "true")
    return op
}

// Update send Draft Envelope/Void Envelope/Move/Purge Envelope/Modify draft
// SDK Method Envelopes::update
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/update
func (s *Service) Update(envelopeID string, envelopes *model.Envelope) *UpdateCall {
    return &UpdateCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopes,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateCall implements DocuSign API SDK Envelopes::update
type UpdateCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateCall) Do(ctx context.Context)  (*model.EnvelopeUpdateSummary, error) {
    var res *model.EnvelopeUpdateSummary
    return res, op.Call.Do(ctx, &res)
}

// AdvancedUpdate when set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes.
func (op *UpdateCall) AdvancedUpdate() *UpdateCall {
    op.QueryOpts.Set("advanced_update", "true")
    return op
}

// ResendEnvelope when set to **true**, sends the specified envelope again.
func (op *UpdateCall) ResendEnvelope() *UpdateCall {
    op.QueryOpts.Set("resend_envelope", "true")
    return op
}

// ListStatus gets the envelope status for the specified envelopes.
// SDK Method Envelopes::listStatus
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/listStatus
func (s *Service) ListStatus(envelopeIdsRequest *model.EnvelopeIdsRequest) *ListStatusCall {
    return &ListStatusCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/status",
            Payload: envelopeIdsRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// ListStatusCall implements DocuSign API SDK Envelopes::listStatus
type ListStatusCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListStatusCall) Do(ctx context.Context)  (*model.EnvelopesInformation, error) {
    var res *model.EnvelopesInformation
    return res, op.Call.Do(ctx, &res)
}

// Email reserved for DocuSign.
func (op *ListStatusCall) Email(val string) *ListStatusCall {
    op.QueryOpts.Set("email", val)
    return op
}

// FromDate is the date/time setting that specifies when the request begins checking for status changes for envelopes in the account.
// 
// This is required unless parameters `envelopeIds` and/or `transactionIds` are set.
func (op *ListStatusCall) FromDate(val time.Time) *ListStatusCall {
    op.QueryOpts.Set("from_date", val.Format(time.RFC3339))
    return op
}

// StartPosition reserved for DocuSign.
func (op *ListStatusCall) StartPosition(val int) *ListStatusCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// ToDate optional date/time setting
// that specifies the last date/time 
// or envelope status changes in the result set. 
// 
// Default: "now", the time that you call the method.
func (op *ListStatusCall) ToDate(val time.Time) *ListStatusCall {
    op.QueryOpts.Set("to_date", val.Format(time.RFC3339))
    return op
}

// GetFormData returns envelope form data for an existing envelope.
// SDK Method Envelopes::getFormData
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeFormData/get
func (s *Service) GetFormData(envelopeID string) *GetFormDataCall {
    return &GetFormDataCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/form_data",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetFormDataCall implements DocuSign API SDK Envelopes::getFormData
type GetFormDataCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetFormDataCall) Do(ctx context.Context)  (*model.EnvelopeFormData, error) {
    var res *model.EnvelopeFormData
    return res, op.Call.Do(ctx, &res)
}

// DeleteLock deletes an envelope lock.
// SDK Method Envelopes::deleteLock
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeLocks/delete
func (s *Service) DeleteLock(envelopeID string) *DeleteLockCall {
    return &DeleteLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/lock",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteLockCall implements DocuSign API SDK Envelopes::deleteLock
type DeleteLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// GetLock gets envelope lock information.
// SDK Method Envelopes::getLock
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeLocks/get
func (s *Service) GetLock(envelopeID string) *GetLockCall {
    return &GetLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/lock",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetLockCall implements DocuSign API SDK Envelopes::getLock
type GetLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// CreateLock lock an envelope.
// SDK Method Envelopes::createLock
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeLocks/create
func (s *Service) CreateLock(envelopeID string, lockRequest *model.LockRequest) *CreateLockCall {
    return &CreateLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/lock",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: lockRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateLockCall implements DocuSign API SDK Envelopes::createLock
type CreateLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// UpdateLock updates an envelope lock.
// SDK Method Envelopes::updateLock
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeLocks/update
func (s *Service) UpdateLock(envelopeID string, lockRequest *model.LockRequest) *UpdateLockCall {
    return &UpdateLockCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/lock",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: lockRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateLockCall implements DocuSign API SDK Envelopes::updateLock
type UpdateLockCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateLockCall) Do(ctx context.Context)  (*model.LockInformation, error) {
    var res *model.LockInformation
    return res, op.Call.Do(ctx, &res)
}

// GetNotificationSettings gets envelope notification information.
// SDK Method Envelopes::getNotificationSettings
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/getNotificationSettings
func (s *Service) GetNotificationSettings(envelopeID string) *GetNotificationSettingsCall {
    return &GetNotificationSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/notification",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetNotificationSettingsCall implements DocuSign API SDK Envelopes::getNotificationSettings
type GetNotificationSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetNotificationSettingsCall) Do(ctx context.Context)  (*model.Notification, error) {
    var res *model.Notification
    return res, op.Call.Do(ctx, &res)
}

// UpdateNotificationSettings sets envelope notification (Reminders/Expirations) structure for an existing envelope.
// SDK Method Envelopes::updateNotificationSettings
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/updateNotificationSettings
func (s *Service) UpdateNotificationSettings(envelopeID string, envelopeNotificationRequest *model.EnvelopeNotificationRequest) *UpdateNotificationSettingsCall {
    return &UpdateNotificationSettingsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/notification",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeNotificationRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateNotificationSettingsCall implements DocuSign API SDK Envelopes::updateNotificationSettings
type UpdateNotificationSettingsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateNotificationSettingsCall) Do(ctx context.Context)  (*model.Notification, error) {
    var res *model.Notification
    return res, op.Call.Do(ctx, &res)
}

// DeleteDocumentPage deletes a page from a document in an envelope.
// SDK Method Envelopes::deleteDocumentPage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/deleteDocumentPage
func (s *Service) DeleteDocumentPage(documentID string, envelopeID string, pageNumber string) *DeleteDocumentPageCall {
    return &DeleteDocumentPageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
                "{pageNumber}": pageNumber,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteDocumentPageCall implements DocuSign API SDK Envelopes::deleteDocumentPage
type DeleteDocumentPageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteDocumentPageCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// GetDocumentPageImage gets a page image from an envelope for display.
// SDK Method Envelopes::getDocumentPageImage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/getPageImage
func (s *Service) GetDocumentPageImage(documentID string, envelopeID string, pageNumber string) *GetDocumentPageImageCall {
    return &GetDocumentPageImageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
                "{pageNumber}": pageNumber,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetDocumentPageImageCall implements DocuSign API SDK Envelopes::getDocumentPageImage
type GetDocumentPageImageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetDocumentPageImageCall) Do(ctx context.Context)  (*esign.File, error) {
    var res *esign.File
    return res, op.Call.Do(ctx, &res)
}

// Dpi sets the dpi for the image.
func (op *GetDocumentPageImageCall) Dpi(val int) *GetDocumentPageImageCall {
    op.QueryOpts.Set("dpi", fmt.Sprintf("%d", val ))
    return op
}

// MaxHeight sets the maximum height for the page image in pixels. The dpi is recalculated based on this setting.
func (op *GetDocumentPageImageCall) MaxHeight(val int) *GetDocumentPageImageCall {
    op.QueryOpts.Set("max_height", fmt.Sprintf("%d", val ))
    return op
}

// MaxWidth sets the maximum width for the page image in pixels. The dpi is recalculated based on this setting.
func (op *GetDocumentPageImageCall) MaxWidth(val int) *GetDocumentPageImageCall {
    op.QueryOpts.Set("max_width", fmt.Sprintf("%d", val ))
    return op
}

// ShowChanges set the call query parameter show_changes
func (op *GetDocumentPageImageCall) ShowChanges() *GetDocumentPageImageCall {
    op.QueryOpts.Set("show_changes", "true")
    return op
}

// GetPages returns document page image(s) based on input.
// SDK Method Envelopes::getPages
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/getPageImages
func (s *Service) GetPages(documentID string, envelopeID string) *GetPagesCall {
    return &GetPagesCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}/pages",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetPagesCall implements DocuSign API SDK Envelopes::getPages
type GetPagesCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetPagesCall) Do(ctx context.Context)  (*model.PageImages, error) {
    var res *model.PageImages
    return res, op.Call.Do(ctx, &res)
}

// Count is the maximum number of results to be returned by this request.
func (op *GetPagesCall) Count(val int) *GetPagesCall {
    op.QueryOpts.Set("count", fmt.Sprintf("%d", val ))
    return op
}

// Dpi number of dots per inch for the resulting image. The default if not used is 94. The range is 1-310.
func (op *GetPagesCall) Dpi(val int) *GetPagesCall {
    op.QueryOpts.Set("dpi", fmt.Sprintf("%d", val ))
    return op
}

// MaxHeight sets the maximum height (in pixels) of the returned image.
func (op *GetPagesCall) MaxHeight(val int) *GetPagesCall {
    op.QueryOpts.Set("max_height", fmt.Sprintf("%d", val ))
    return op
}

// MaxWidth sets the maximum width (in pixels) of the returned image.
func (op *GetPagesCall) MaxWidth(val int) *GetPagesCall {
    op.QueryOpts.Set("max_width", fmt.Sprintf("%d", val ))
    return op
}

// Nocache set the call query parameter nocache
func (op *GetPagesCall) Nocache() *GetPagesCall {
    op.QueryOpts.Set("nocache", "true")
    return op
}

// ShowChanges set the call query parameter show_changes
func (op *GetPagesCall) ShowChanges() *GetPagesCall {
    op.QueryOpts.Set("show_changes", "true")
    return op
}

// StartPosition is the position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.
func (op *GetPagesCall) StartPosition(val int) *GetPagesCall {
    op.QueryOpts.Set("start_position", fmt.Sprintf("%d", val ))
    return op
}

// RotateDocumentPage rotates page image from an envelope for display.
// SDK Method Envelopes::rotateDocumentPage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/rotateDocumentPage
func (s *Service) RotateDocumentPage(documentID string, envelopeID string, pageNumber string, pageRequest *model.PageRequest) *RotateDocumentPageCall {
    return &RotateDocumentPageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
                "{pageNumber}": pageNumber,
            },
            Payload: pageRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// RotateDocumentPageCall implements DocuSign API SDK Envelopes::rotateDocumentPage
type RotateDocumentPageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *RotateDocumentPageCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// DeleteRecipient deletes a recipient from an envelope.
// SDK Method Envelopes::deleteRecipient
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipients/delete
func (s *Service) DeleteRecipient(envelopeID string, recipientID string) *DeleteRecipientCall {
    return &DeleteRecipientCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteRecipientCall implements DocuSign API SDK Envelopes::deleteRecipient
type DeleteRecipientCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteRecipientCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// DeleteTabs deletes the tabs associated with a recipient.
// SDK Method Envelopes::deleteTabs
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipientTabs/delete
func (s *Service) DeleteTabs(envelopeID string, recipientID string, envelopeRecipientTabs *model.Tabs) *DeleteTabsCall {
    return &DeleteTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            Payload: envelopeRecipientTabs,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteTabsCall implements DocuSign API SDK Envelopes::deleteTabs
type DeleteTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// DeleteRecipients deletes recipients from an envelope.
// SDK Method Envelopes::deleteRecipients
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipients/deleteList
func (s *Service) DeleteRecipients(envelopeID string, envelopeRecipients *model.Recipients) *DeleteRecipientsCall {
    return &DeleteRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/recipients",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteRecipientsCall implements DocuSign API SDK Envelopes::deleteRecipients
type DeleteRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteRecipientsCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// GetRecipientDocumentVisibility returns document visibility for the recipients
// SDK Method Envelopes::getRecipientDocumentVisibility
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentVisibility/get
func (s *Service) GetRecipientDocumentVisibility(envelopeID string, recipientID string) *GetRecipientDocumentVisibilityCall {
    return &GetRecipientDocumentVisibilityCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/document_visibility",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetRecipientDocumentVisibilityCall implements DocuSign API SDK Envelopes::getRecipientDocumentVisibility
type GetRecipientDocumentVisibilityCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetRecipientDocumentVisibilityCall) Do(ctx context.Context)  (*model.DocumentVisibilityList, error) {
    var res *model.DocumentVisibilityList
    return res, op.Call.Do(ctx, &res)
}

// GetRecipientInitialsImage gets the initials image for a user.
// SDK Method Envelopes::getRecipientInitialsImage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/getRecipientInitialsImage
func (s *Service) GetRecipientInitialsImage(envelopeID string, recipientID string) *GetRecipientInitialsImageCall {
    return &GetRecipientInitialsImageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/initials_image",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetRecipientInitialsImageCall implements DocuSign API SDK Envelopes::getRecipientInitialsImage
type GetRecipientInitialsImageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetRecipientInitialsImageCall) Do(ctx context.Context)  (*esign.File, error) {
    var res *esign.File
    return res, op.Call.Do(ctx, &res)
}

// IncludeChrome is the added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.
func (op *GetRecipientInitialsImageCall) IncludeChrome() *GetRecipientInitialsImageCall {
    op.QueryOpts.Set("include_chrome", "true")
    return op
}

// GetRecipientSignature gets signature information for a signer or sign-in-person recipient.
// SDK Method Envelopes::getRecipientSignature
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/getRecipientSignature
func (s *Service) GetRecipientSignature(envelopeID string, recipientID string) *GetRecipientSignatureCall {
    return &GetRecipientSignatureCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/signature",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetRecipientSignatureCall implements DocuSign API SDK Envelopes::getRecipientSignature
type GetRecipientSignatureCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetRecipientSignatureCall) Do(ctx context.Context)  (*model.UserSignature, error) {
    var res *model.UserSignature
    return res, op.Call.Do(ctx, &res)
}

// GetRecipientSignatureImage retrieve signature image information for a signer/sign-in-person recipient.
// SDK Method Envelopes::getRecipientSignatureImage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/getRecipientSignatureImage
func (s *Service) GetRecipientSignatureImage(envelopeID string, recipientID string) *GetRecipientSignatureImageCall {
    return &GetRecipientSignatureImageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/signature_image",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetRecipientSignatureImageCall implements DocuSign API SDK Envelopes::getRecipientSignatureImage
type GetRecipientSignatureImageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetRecipientSignatureImageCall) Do(ctx context.Context)  (*esign.File, error) {
    var res *esign.File
    return res, op.Call.Do(ctx, &res)
}

// IncludeChrome when set to **true**, indicates the chromed version of the signature image should be retrieved.
func (op *GetRecipientSignatureImageCall) IncludeChrome() *GetRecipientSignatureImageCall {
    op.QueryOpts.Set("include_chrome", "true")
    return op
}

// ListTabs gets the tabs information for a signer or sign-in-person recipient in an envelope.
// SDK Method Envelopes::listTabs
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipientTabs/list
func (s *Service) ListTabs(envelopeID string, recipientID string) *ListTabsCall {
    return &ListTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListTabsCall implements DocuSign API SDK Envelopes::listTabs
type ListTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// IncludeAnchorTabLocations when set to **true**, all tabs with anchor tab properties are included in the response.
func (op *ListTabsCall) IncludeAnchorTabLocations() *ListTabsCall {
    op.QueryOpts.Set("include_anchor_tab_locations", "true")
    return op
}

// IncludeMetadata reserved for DocuSign.
func (op *ListTabsCall) IncludeMetadata(val string) *ListTabsCall {
    op.QueryOpts.Set("include_metadata", val)
    return op
}

// ListRecipients gets the status of recipients for an envelope.
// SDK Method Envelopes::listRecipients
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipients/list
func (s *Service) ListRecipients(envelopeID string) *ListRecipientsCall {
    return &ListRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/recipients",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListRecipientsCall implements DocuSign API SDK Envelopes::listRecipients
type ListRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListRecipientsCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// IncludeAnchorTabLocations when set to **true** and `include_tabs` is set to **true**, all tabs with anchor tab properties are included in the response.
func (op *ListRecipientsCall) IncludeAnchorTabLocations() *ListRecipientsCall {
    op.QueryOpts.Set("include_anchor_tab_locations", "true")
    return op
}

// IncludeExtended when set to **true**, the extended properties are included in the response.
func (op *ListRecipientsCall) IncludeExtended() *ListRecipientsCall {
    op.QueryOpts.Set("include_extended", "true")
    return op
}

// IncludeMetadata reserved for DocuSign.
func (op *ListRecipientsCall) IncludeMetadata(val string) *ListRecipientsCall {
    op.QueryOpts.Set("include_metadata", val)
    return op
}

// IncludeTabs when set to **true**, the tab information associated with the recipient is included in the response.
func (op *ListRecipientsCall) IncludeTabs() *ListRecipientsCall {
    op.QueryOpts.Set("include_tabs", "true")
    return op
}

// GetTemplateRecipientDocumentVisibility returns document visibility for the recipients
// SDK Method Envelopes::getTemplateRecipientDocumentVisibility
// https://docs.docusign.com/esign/restapi/Envelopes/TemplateDocumentVisibility/get
func (s *Service) GetTemplateRecipientDocumentVisibility(recipientID string, templateID string) *GetTemplateRecipientDocumentVisibilityCall {
    return &GetTemplateRecipientDocumentVisibilityCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "templates/{templateId}/recipients/{recipientId}/document_visibility",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetTemplateRecipientDocumentVisibilityCall implements DocuSign API SDK Envelopes::getTemplateRecipientDocumentVisibility
type GetTemplateRecipientDocumentVisibilityCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetTemplateRecipientDocumentVisibilityCall) Do(ctx context.Context)  (*model.DocumentVisibilityList, error) {
    var res *model.DocumentVisibilityList
    return res, op.Call.Do(ctx, &res)
}

// CreateTabs adds tabs for a recipient.
// SDK Method Envelopes::createTabs
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipientTabs/create
func (s *Service) CreateTabs(envelopeID string, recipientID string, envelopeRecipientTabs *model.Tabs) *CreateTabsCall {
    return &CreateTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            Payload: envelopeRecipientTabs,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateTabsCall implements DocuSign API SDK Envelopes::createTabs
type CreateTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// CreateRecipient adds one or more recipients to an envelope.
// SDK Method Envelopes::createRecipient
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipients/create
func (s *Service) CreateRecipient(envelopeID string, envelopeRecipients *model.Recipients) *CreateRecipientCall {
    return &CreateRecipientCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/recipients",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateRecipientCall implements DocuSign API SDK Envelopes::createRecipient
type CreateRecipientCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateRecipientCall) Do(ctx context.Context)  (*model.Recipients, error) {
    var res *model.Recipients
    return res, op.Call.Do(ctx, &res)
}

// ResendEnvelope when set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
func (op *CreateRecipientCall) ResendEnvelope() *CreateRecipientCall {
    op.QueryOpts.Set("resend_envelope", "true")
    return op
}

// UpdateRecipientDocumentVisibility updates document visibility for the recipients
// SDK Method Envelopes::updateRecipientDocumentVisibility
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentVisibility/update
func (s *Service) UpdateRecipientDocumentVisibility(envelopeID string, recipientID string, envelopeDocumentVisibility *model.DocumentVisibilityList) *UpdateRecipientDocumentVisibilityCall {
    return &UpdateRecipientDocumentVisibilityCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/document_visibility",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            Payload: envelopeDocumentVisibility,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateRecipientDocumentVisibilityCall implements DocuSign API SDK Envelopes::updateRecipientDocumentVisibility
type UpdateRecipientDocumentVisibilityCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateRecipientDocumentVisibilityCall) Do(ctx context.Context)  (*model.DocumentVisibilityList, error) {
    var res *model.DocumentVisibilityList
    return res, op.Call.Do(ctx, &res)
}

// UpdateRecipientInitialsImage sets the initials image for an accountless signer.
// SDK Method Envelopes::updateRecipientInitialsImage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/updateRecipientInitialsImage
func (s *Service) UpdateRecipientInitialsImage(envelopeID string, recipientID string) *UpdateRecipientInitialsImageCall {
    return &UpdateRecipientInitialsImageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/initials_image",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateRecipientInitialsImageCall implements DocuSign API SDK Envelopes::updateRecipientInitialsImage
type UpdateRecipientInitialsImageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateRecipientInitialsImageCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// UpdateRecipientSignatureImage sets the signature image for an accountless signer.
// SDK Method Envelopes::updateRecipientSignatureImage
// https://docs.docusign.com/esign/restapi/Envelopes/Envelopes/updateRecipientSignatureImage
func (s *Service) UpdateRecipientSignatureImage(envelopeID string, recipientID string) *UpdateRecipientSignatureImageCall {
    return &UpdateRecipientSignatureImageCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/signature_image",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateRecipientSignatureImageCall implements DocuSign API SDK Envelopes::updateRecipientSignatureImage
type UpdateRecipientSignatureImageCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateRecipientSignatureImageCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// UpdateTabs updates the tabs for a recipient.
// 
// 
// SDK Method Envelopes::updateTabs
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipientTabs/update
func (s *Service) UpdateTabs(envelopeID string, recipientID string, envelopeRecipientTabs *model.Tabs) *UpdateTabsCall {
    return &UpdateTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/recipients/{recipientId}/tabs",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
                "{recipientId}": recipientID,
            },
            Payload: envelopeRecipientTabs,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateTabsCall implements DocuSign API SDK Envelopes::updateTabs
type UpdateTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// UpdateRecipients updates recipients in a draft envelope or corrects recipient information for an in process envelope.
// SDK Method Envelopes::updateRecipients
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeRecipients/update
func (s *Service) UpdateRecipients(envelopeID string, envelopeRecipients *model.Recipients) *UpdateRecipientsCall {
    return &UpdateRecipientsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/recipients",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeRecipients,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateRecipientsCall implements DocuSign API SDK Envelopes::updateRecipients
type UpdateRecipientsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateRecipientsCall) Do(ctx context.Context)  (*model.RecipientsUpdateSummary, error) {
    var res *model.RecipientsUpdateSummary
    return res, op.Call.Do(ctx, &res)
}

// ResendEnvelope when set to **true**, resends the   envelope if the new recipient's routing order is before or the same as the envelope's next recipient.
func (op *UpdateRecipientsCall) ResendEnvelope() *UpdateRecipientsCall {
    op.QueryOpts.Set("resend_envelope", "true")
    return op
}

// UpdateRecipientsDocumentVisibility updates document visibility for the recipients
// SDK Method Envelopes::updateRecipientsDocumentVisibility
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentVisibility/updateList
func (s *Service) UpdateRecipientsDocumentVisibility(envelopeID string, envelopeDocumentVisibility *model.DocumentVisibilityList) *UpdateRecipientsDocumentVisibilityCall {
    return &UpdateRecipientsDocumentVisibilityCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "envelopes/{envelopeId}/recipients/document_visibility",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: envelopeDocumentVisibility,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateRecipientsDocumentVisibilityCall implements DocuSign API SDK Envelopes::updateRecipientsDocumentVisibility
type UpdateRecipientsDocumentVisibilityCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateRecipientsDocumentVisibilityCall) Do(ctx context.Context)  (*model.DocumentVisibilityList, error) {
    var res *model.DocumentVisibilityList
    return res, op.Call.Do(ctx, &res)
}

// UpdateTemplateRecipientDocumentVisibility updates document visibility for the recipients
// SDK Method Envelopes::updateTemplateRecipientDocumentVisibility
// https://docs.docusign.com/esign/restapi/Envelopes/TemplateDocumentVisibility/update
func (s *Service) UpdateTemplateRecipientDocumentVisibility(recipientID string, templateID string, templateDocumentVisibility *model.TemplateDocumentVisibilityList) *UpdateTemplateRecipientDocumentVisibilityCall {
    return &UpdateTemplateRecipientDocumentVisibilityCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/recipients/{recipientId}/document_visibility",
            PathParameters: map[string]string{ 
                "{recipientId}": recipientID,
                "{templateId}": templateID,
            },
            Payload: templateDocumentVisibility,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateTemplateRecipientDocumentVisibilityCall implements DocuSign API SDK Envelopes::updateTemplateRecipientDocumentVisibility
type UpdateTemplateRecipientDocumentVisibilityCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateTemplateRecipientDocumentVisibilityCall) Do(ctx context.Context)  (*model.TemplateDocumentVisibilityList, error) {
    var res *model.TemplateDocumentVisibilityList
    return res, op.Call.Do(ctx, &res)
}

// UpdateTemplateRecipientsDocumentVisibility updates document visibility for the recipients
// SDK Method Envelopes::updateTemplateRecipientsDocumentVisibility
// https://docs.docusign.com/esign/restapi/Envelopes/TemplateDocumentVisibility/updateList
func (s *Service) UpdateTemplateRecipientsDocumentVisibility(templateID string, templateDocumentVisibility *model.TemplateDocumentVisibilityList) *UpdateTemplateRecipientsDocumentVisibilityCall {
    return &UpdateTemplateRecipientsDocumentVisibilityCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "PUT",
            Path: "templates/{templateId}/recipients/document_visibility",
            PathParameters: map[string]string{ 
                "{templateId}": templateID,
            },
            Payload: templateDocumentVisibility,
            QueryOpts: make(url.Values),
        },
    }
}

// UpdateTemplateRecipientsDocumentVisibilityCall implements DocuSign API SDK Envelopes::updateTemplateRecipientsDocumentVisibility
type UpdateTemplateRecipientsDocumentVisibilityCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *UpdateTemplateRecipientsDocumentVisibilityCall) Do(ctx context.Context)  (*model.TemplateDocumentVisibilityList, error) {
    var res *model.TemplateDocumentVisibilityList
    return res, op.Call.Do(ctx, &res)
}

// GetDocumentTabs returns tabs on the document.
// SDK Method Envelopes::getDocumentTabs
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentTabs/get
func (s *Service) GetDocumentTabs(documentID string, envelopeID string) *GetDocumentTabsCall {
    return &GetDocumentTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}/tabs",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetDocumentTabsCall implements DocuSign API SDK Envelopes::getDocumentTabs
type GetDocumentTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetDocumentTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// PageNumbers set the call query parameter page_numbers
func (op *GetDocumentTabsCall) PageNumbers(val string) *GetDocumentTabsCall {
    op.QueryOpts.Set("page_numbers", val)
    return op
}

// GetPageTabs returns tabs on the specified page.
// SDK Method Envelopes::getPageTabs
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeDocumentTabs/getByPage
func (s *Service) GetPageTabs(documentID string, envelopeID string, pageNumber string) *GetPageTabsCall {
    return &GetPageTabsCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/tabs",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
                "{pageNumber}": pageNumber,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// GetPageTabsCall implements DocuSign API SDK Envelopes::getPageTabs
type GetPageTabsCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *GetPageTabsCall) Do(ctx context.Context)  (*model.Tabs, error) {
    var res *model.Tabs
    return res, op.Call.Do(ctx, &res)
}

// DeleteTemplatesFromDocument deletes a template from a document in an existing envelope.
// SDK Method Envelopes::deleteTemplatesFromDocument
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeTemplates/delete
func (s *Service) DeleteTemplatesFromDocument(documentID string, envelopeID string, templateID string) *DeleteTemplatesFromDocumentCall {
    return &DeleteTemplatesFromDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "DELETE",
            Path: "envelopes/{envelopeId}/documents/{documentId}/templates/{templateId}",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
                "{templateId}": templateID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// DeleteTemplatesFromDocumentCall implements DocuSign API SDK Envelopes::deleteTemplatesFromDocument
type DeleteTemplatesFromDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *DeleteTemplatesFromDocumentCall) Do(ctx context.Context)  error {
    
    return op.Call.Do(ctx, nil)
}

// ListTemplatesForDocument gets the templates associated with a document in an existing envelope.
// SDK Method Envelopes::listTemplatesForDocument
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeTemplates/listByDocument
func (s *Service) ListTemplatesForDocument(documentID string, envelopeID string) *ListTemplatesForDocumentCall {
    return &ListTemplatesForDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/documents/{documentId}/templates",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListTemplatesForDocumentCall implements DocuSign API SDK Envelopes::listTemplatesForDocument
type ListTemplatesForDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListTemplatesForDocumentCall) Do(ctx context.Context)  (*model.TemplateInformation, error) {
    var res *model.TemplateInformation
    return res, op.Call.Do(ctx, &res)
}

// Include is a comma-separated list
// that limits the results.
// Valid values:
// 
// * applied
// * matched
func (op *ListTemplatesForDocumentCall) Include(val ...string) *ListTemplatesForDocumentCall {
    op.QueryOpts.Set("include", strings.Join(val,","))
    return op
}

// ListTemplates get List of Templates used in an Envelope
// SDK Method Envelopes::listTemplates
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeTemplates/list
func (s *Service) ListTemplates(envelopeID string) *ListTemplatesCall {
    return &ListTemplatesCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "GET",
            Path: "envelopes/{envelopeId}/templates",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            QueryOpts: make(url.Values),
        },
    }
}

// ListTemplatesCall implements DocuSign API SDK Envelopes::listTemplates
type ListTemplatesCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ListTemplatesCall) Do(ctx context.Context)  (*model.TemplateInformation, error) {
    var res *model.TemplateInformation
    return res, op.Call.Do(ctx, &res)
}

// Include is the possible values are:  matching_applied - This returns template matching information for the template.
func (op *ListTemplatesCall) Include(val string) *ListTemplatesCall {
    op.QueryOpts.Set("include", val)
    return op
}

// ApplyTemplateToDocument adds templates to a document in an  envelope.
// SDK Method Envelopes::applyTemplateToDocument
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeTemplates/applyToDocument
func (s *Service) ApplyTemplateToDocument(documentID string, envelopeID string, documentTemplateList *model.DocumentTemplateList) *ApplyTemplateToDocumentCall {
    return &ApplyTemplateToDocumentCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/documents/{documentId}/templates",
            PathParameters: map[string]string{ 
                "{documentId}": documentID,
                "{envelopeId}": envelopeID,
            },
            Payload: documentTemplateList,
            QueryOpts: make(url.Values),
        },
    }
}

// ApplyTemplateToDocumentCall implements DocuSign API SDK Envelopes::applyTemplateToDocument
type ApplyTemplateToDocumentCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ApplyTemplateToDocumentCall) Do(ctx context.Context)  (*model.DocumentTemplateList, error) {
    var res *model.DocumentTemplateList
    return res, op.Call.Do(ctx, &res)
}

// ApplyTemplate adds templates to an envelope.
// SDK Method Envelopes::applyTemplate
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeTemplates/apply
func (s *Service) ApplyTemplate(envelopeID string, documentTemplateList *model.DocumentTemplateList) *ApplyTemplateCall {
    return &ApplyTemplateCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/templates",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: documentTemplateList,
            QueryOpts: make(url.Values),
        },
    }
}

// ApplyTemplateCall implements DocuSign API SDK Envelopes::applyTemplate
type ApplyTemplateCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *ApplyTemplateCall) Do(ctx context.Context)  (*model.DocumentTemplateList, error) {
    var res *model.DocumentTemplateList
    return res, op.Call.Do(ctx, &res)
}

// CreateConsoleView returns a URL to the authentication view UI.
// SDK Method Envelopes::createConsoleView
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeViews/createConsole
func (s *Service) CreateConsoleView(consoleViewRequest *model.ConsoleViewRequest) *CreateConsoleViewCall {
    return &CreateConsoleViewCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "views/console",
            Payload: consoleViewRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateConsoleViewCall implements DocuSign API SDK Envelopes::createConsoleView
type CreateConsoleViewCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateConsoleViewCall) Do(ctx context.Context)  (*model.ViewURL, error) {
    var res *model.ViewURL
    return res, op.Call.Do(ctx, &res)
}

// CreateCorrectView returns a URL to the envelope correction UI.
// SDK Method Envelopes::createCorrectView
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeViews/createCorrect
func (s *Service) CreateCorrectView(envelopeID string, correctViewRequest *model.CorrectViewRequest) *CreateCorrectViewCall {
    return &CreateCorrectViewCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/views/correct",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: correctViewRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateCorrectViewCall implements DocuSign API SDK Envelopes::createCorrectView
type CreateCorrectViewCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateCorrectViewCall) Do(ctx context.Context)  (*model.ViewURL, error) {
    var res *model.ViewURL
    return res, op.Call.Do(ctx, &res)
}

// CreateEditView returns a URL to the edit view UI.
// SDK Method Envelopes::createEditView
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeViews/createEdit
func (s *Service) CreateEditView(envelopeID string, returnURLRequest *model.ReturnURLRequest) *CreateEditViewCall {
    return &CreateEditViewCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/views/edit",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: returnURLRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateEditViewCall implements DocuSign API SDK Envelopes::createEditView
type CreateEditViewCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateEditViewCall) Do(ctx context.Context)  (*model.ViewURL, error) {
    var res *model.ViewURL
    return res, op.Call.Do(ctx, &res)
}

// CreateRecipientView returns a URL to the recipient view UI.
// SDK Method Envelopes::createRecipientView
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeViews/createRecipient
func (s *Service) CreateRecipientView(envelopeID string, recipientViewRequest *model.RecipientViewRequest) *CreateRecipientViewCall {
    return &CreateRecipientViewCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/views/recipient",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: recipientViewRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateRecipientViewCall implements DocuSign API SDK Envelopes::createRecipientView
type CreateRecipientViewCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateRecipientViewCall) Do(ctx context.Context)  (*model.ViewURL, error) {
    var res *model.ViewURL
    return res, op.Call.Do(ctx, &res)
}

// CreateSenderView returns a URL to the sender view UI.
// SDK Method Envelopes::createSenderView
// https://docs.docusign.com/esign/restapi/Envelopes/EnvelopeViews/createSender
func (s *Service) CreateSenderView(envelopeID string, returnURLRequest *model.ReturnURLRequest) *CreateSenderViewCall {
    return &CreateSenderViewCall{
        &esign.Call{
            Credential: s.credential,
    		Method:  "POST",
            Path: "envelopes/{envelopeId}/views/sender",
            PathParameters: map[string]string{ 
                "{envelopeId}": envelopeID,
            },
            Payload: returnURLRequest,
            QueryOpts: make(url.Values),
        },
    }
}

// CreateSenderViewCall implements DocuSign API SDK Envelopes::createSenderView
type CreateSenderViewCall struct {
    *esign.Call
}

// Do executes the call.  A nil context will return error.
func (op *CreateSenderViewCall) Do(ctx context.Context)  (*model.ViewURL, error) {
    var res *model.ViewURL
    return res, op.Call.Do(ctx, &res)
}

